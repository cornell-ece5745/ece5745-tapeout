#!/usr/bin/env python
#=========================================================================
# regincr-sim <input-values>
#=========================================================================

from pymtl3  import *
from sys     import argv
from RegIncr import RegIncr

# Get list of input values from command line

input_values = [ int(x,0) for x in argv[1:] ]

# Add three zero values to end of list of input values

input_values.extend( [0]*3 )

# ''' TUTORIAL TASK ''''''''''''''''''''''''''''''''''''''''''''''''''''''
# This simulator script is incomplete. As part of the tutorial you will
# insert code here for constructing and elaborating a RegIncr model
# before using the SimulationTool to create a simulator.
# ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\/

# Instantiate and elaborate the model

model = RegIncr()
model.elaborate()

# Apply necessary passes

# ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''/\
# Create a simulator by applying the default pass group

model.apply( DefaultPassGroup(textwave=True) )

# Reset simulator

model.sim_reset()

# Apply input values and display output values

for input_value in input_values:

  # Write input value to input port

  model.in_ @= input_value
  model.sim_eval_combinational()

  # ''' TUTORIAL TASK ''''''''''''''''''''''''''''''''''''''''''''''''''''
  # In the following print statement we are directly using the model
  # ports to create some tracing output. Later in the tutorial you will
  # replace this with a call to the simulator's print_line_trace method.
  # ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\/
  #:
  #: print( f" cycle = {model.sim_cycle_count()}: in = {model.in_}, out = {model.out}" )
  #:

  # Display line trace

  print( f" cycle = {model.sim_cycle_count()}: in = {model.in_}, out = {model.out}" )

  # ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''/\
  # Tick simulator one cycle

  model.sim_tick()

model.print_textwave()
