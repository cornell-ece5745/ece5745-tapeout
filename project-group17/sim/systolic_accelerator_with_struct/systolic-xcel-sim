#!/usr/bin/env python
#=========================================================================
# regincr-sim <input-values>
#=========================================================================
import os
import sys
import time
sim_dir = os.path.dirname( os.path.abspath( __file__ ) )
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + "pymtl.ini" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)

import argparse
import re
import struct

import numpy as np

from random import randint

from pymtl3 import *
from pymtl3.stdlib.test_utils import config_model_with_cmdline_opts
from pymtl3.passes.backends.verilog import VerilogPlaceholderPass

from systolic_accelerator.top.WrapperMsgs    import *
from systolic_accelerator.top.WrapperRTL import WrapperRTL
from systolic_accelerator.top.Wrapper2DLineTracingRTL import Wrapper2DLineTracingRTL
from systolic_accelerator.top.WrapperRTL_test import *
from systolic_accelerator.top.Wrapper2DLineTracingRTL_test import *
#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help",    action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--trace",     action="store_true" )
  p.add_argument( "--trace2d",     action="store_true" )
  p.add_argument( "--step",     action="store_true" )
  p.add_argument( "--stats",     action="store_true" )
  p.add_argument( "--translate", action="store_true" )
  p.add_argument( "--dump-vcd",  action="store_true" )
  p.add_argument( "--dump-vtb",  action="store_true" )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

def main():
  try:
    import pypyjit
    pypyjit.set_param("off")
  except:
    pass

  opts = parse_cmdline()

  FRAC_WIDTH = 16

  if (opts.trace2d):
    th = TestHarness2d()
  else:
    th = TestHarness()

  len = 784

  # read in trained data in fixed point
  FRAC_WIDTH = 16
  WEIGHTPATH = "../../baseline/parameter_generator/fixed_parameters/16/fc1_fixed_weights_1d.dat"
  DATAPATH_0 = "../../python/data/systolic_array_inputs/fixed_point/pe0_img_fixed.dat"
  DATAPATH_1 = "../../python/data/systolic_array_inputs/fixed_point/pe1_img_fixed.dat"
  
  weight = np.genfromtxt(WEIGHTPATH, delimiter=",")
  data_0 = np.genfromtxt(DATAPATH_0, delimiter=",")
  data_1 = np.genfromtxt(DATAPATH_1, delimiter=",")
  data = np.vstack((data_0, data_1)).T
  fix_weight = weight.reshape(784, -1)[:, [0,1]].astype('int')
  fix_data = data[:784].reshape(-1, 784).astype('int')

  fix_answer = []
  for i in range(2):
    tmp_lst = []
    for j in range(2):
      tmp = 0
      for k in range(784):
        tmp += (fix_data[i][k]*fix_weight[k][j]) >> FRAC_WIDTH
      tmp_lst.append((int)(tmp))
    fix_answer.append(tmp_lst)

  fix_data = fix_data.tolist()
  fix_weight = fix_weight.tolist()
  final_msg = []

  recv_msg_run = [recv( 0x00000, 0b1111, 0b1, 0b1, 0b0)]
  recv_msg_final_run = [recv( 0x00000, 0b1111, 0b1, 0b1, 0b1)]
  send_msg = [send(fix_answer[1][0], fix_answer[1][1]), send(fix_answer[0][0], fix_answer[0][1])]

  for m in range(int(len/DATA_ENTRIES)):
    recv_msg_0 = [recv( fix_data[0][n+m*DATA_ENTRIES], 0b0001, 0b0, 0b0, 0b0) for n in range(DATA_ENTRIES)]
    recv_msg_1 = [recv( fix_data[1][n+m*DATA_ENTRIES], 0b0010, 0b0, 0b0, 0b0) for n in range(DATA_ENTRIES)]
    recv_msg_2 = [recv( fix_weight[n+m*DATA_ENTRIES][0], 0b0100, 0b0, 0b0, 0b0) for n in range(DATA_ENTRIES)]
    recv_msg_3 = [recv( fix_weight[n+m*DATA_ENTRIES][1], 0b1000, 0b0, 0b0, 0b0) for n in range(DATA_ENTRIES)]
    if m != len/DATA_ENTRIES-1:
      final_msg = final_msg + recv_msg_0 + recv_msg_1 + recv_msg_2 + recv_msg_3 + recv_msg_run
    else:
      final_msg = final_msg + recv_msg_0 + recv_msg_1 + recv_msg_2 + recv_msg_3

  final_msg = final_msg + recv_msg_final_run + send_msg
  
  th.set_param("top.src.construct", msgs=final_msg[:-2])
  
  th.set_param("top.sink.construct", msgs=final_msg[-2:])
  

  unique_name = f"systolic-xcel"

  cmdline_opts = {
    'dump_vcd': f"{unique_name}" if opts.dump_vcd else '',
    'dump_vtb': f"{unique_name}" if opts.dump_vtb else '',
    'test_verilog': 'zeros' if opts.translate else '',
    'test_yosys_verilog': '',
    'dump_textwave': '',
  }

  # Configure the test harness component

  config_model_with_cmdline_opts( th, cmdline_opts, duts=['dut'] )

  th.apply( DefaultPassGroup( linetrace=opts.trace ) )

  th.sim_reset()

  # Run simulation

  count = 0
  while not th.done():
    th.sim_tick()
    if (opts.step):
      input()
      # if count == 0:
      #   for j in range(60): 
      #     sys.stdout.write( "\x1b[A" ) 
      # else:
      if (opts.trace2d):
        for j in range(20): 
          sys.stdout.write( "\x1b[A" ) 


  # Extra ticks to make VCD easier to read

  th.sim_tick()
  th.sim_tick()
  th.sim_tick()

  # Retrieve data from test memory

  # Convert result bytes into list of ints

  result = fix_answer

  # Compare result to sorted reference

  assert result == fix_answer

  # Display statistics

  if opts.stats:
    print( f"num_cycles = {th.sim_cycle_count()}" )

main()
