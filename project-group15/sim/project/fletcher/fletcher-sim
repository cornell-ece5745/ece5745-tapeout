#!/usr/bin/env python
#=========================================================================
# sort-sim [options]
#=========================================================================
#
#  -h --help           Display this message
#
#  --impl              {cl,rtl-flat,rtl-struct}
#  --input <dataset>   {random,sorted-fwd,sorted-rev,zeros}
#  --trace             Display line tracing
#  --stats             Display statistics
#  --translate         Translate RTL model to Verilog
#  --dump-vcd          Dump VCD to sort-<impl>-<input>.vcd
#
# Author : Christopher Batten, Shunning Jiang
# Date   : Jan 23, 2020
#

# Hack to add project root to python path

import os
import sys

sim_dir = os.path.dirname( os.path.abspath( __file__ ) )
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + "pymtl.ini" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)

import argparse
import re

from random import randint

from pymtl3                            import *
from pymtl3.passes.backends.verilog    import *
from pymtl3.stdlib.test_utils          import config_model_with_cmdline_opts
from project.fletcher.Fletcher32UnitRTL  import Fletcher32UnitRTL

from project.fletcher.block_test.Fletcher32UnitRTL_test import TestHarness
from project.fletcher.block_test.Fletcher32UnitRTL_test import small_pos_req, small_pos_resp
from project.fletcher.block_test.Fletcher32UnitRTL_test import large_pos_req, large_pos_resp


from random import seed
seed(0xdeadbeef)

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help",    action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--impl", default="rtl",
    choices=["rtl"] )

  p.add_argument( "--input", default="small",
    choices=["small", "large"] )

  p.add_argument( "--trace",     action="store_true" )
  p.add_argument( "--stats",     action="store_true" )
  p.add_argument( "--translate", action="store_true" )
  p.add_argument( "--dump-vcd",  action="store_true" )
  p.add_argument( "--dump-vtb",  action="store_true" )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#-------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------

def main():
  opts = parse_cmdline()

  # Create input datasets

  inputs = None

  if   opts.input == "small": inputs = [small_pos_req, small_pos_resp]
  elif opts.input == "large": inputs = [large_pos_req, large_pos_resp]

  # Determine which model to use in the simulator

  model_impl_dict = {
    'rtl' : Fletcher32UnitRTL,
  }

  # Check if translation is valid

  if opts.translate and not opts.impl.startswith("rtl"):
    print("\n ERROR: --translate only works with RTL models \n")
    exit(1)
  
  num_cycles = 0


  th = TestHarness( model_impl_dict[ opts.impl ]() )
  
  th.set_param("top.src.construct",  msgs=[item for sublist in inputs[0] for item in sublist])
  th.set_param("top.sink.construct", msgs=[item for sublist in inputs[1] for item in sublist] )

  # Create VCD filename

  unique_name = f"fletcher-{opts.impl}-{opts.input}"

  cmdline_opts = {
    'dump_vcd': f"{unique_name}" if opts.dump_vcd else '',
    'dump_vtb': f"{unique_name}" if opts.dump_vtb else '',
    'test_verilog': 'zeros' if opts.translate else '',
  }

  # Configure the test harness component

  config_model_with_cmdline_opts( th, cmdline_opts, duts=['fletcher'] )

  # Apply necessary passes

  # Create a simulator
  th.apply( DefaultPassGroup( linetrace=opts.trace ) )

  # Reset test harness

  th.sim_reset()

  # Run simulation

  while not th.done():
    th.sim_tick()

  # Extra ticks to make VCD easier to read

  th.sim_tick()
  th.sim_tick()
  th.sim_tick()

  num_cycles += th.sim_cycle_count()

  # Display statistics

  if opts.stats:
    print( f"num_cycles          = {num_cycles}" )

main()
