#!/usr/bin/env python
#=========================================================================
# pmx-sim [options] <elf-binary>
#=========================================================================
# This is the primary simulator we use to drive our processor,
# accelerator, memory compositions. By choosing an FL processor and
# accelerator implementation and no cache we can effectively create an
# ISA simulator, and by choosing RTL implementations we can create an RTL
# simulator and potentially use this simulator to drive the ASIC flow.
# Note that the simulator takes the elf binary, not the VMH file on the
# command line.
#
#  -h --help            Display this message
#
#  --proc-impl  <impl>  Processor implementation (see below)
#  --cache-impl <impl>  Cache implementation (see below)
#  --xcel-impl  <impl>  Accelerator implementation (see below)
#  --extra-mem-latency  Set extra latency for the test memory (default is 0)
#  --trace              Display line tracing
#  --trace-regs         Show regs read/written by each inst
#  --limit              Set max number of cycles, default=100000
#  --stats              Output stats about execution
#  --translate          Translate RTL model to Verilog
#  --dump-vcd   all/roi Dump VCD to imul-<impl>-<input>[.roi].vcd
#  --dump-vtb           Dump a SystemVerilog test harness
#
#  <elf-binary>         Elf binary file for PARC ISA
#
# Processor Implementations:
#  - fl  : functional-level processor model
#  - rtl : register-transfer-level processor model
#
# Cache Implementations:
#  - null : no caches
#  - rtl  : register-transfer-level cache model
#
# Accelerator Implementation:
#  - null-rtl  : empty accelerator
#
# For tut9_xcel, the following accelerator impls are available:
#
#  - vvadd-fl  : vector-vector add accelerator FL model
#  - vvadd-cl  : vector-vector add accelerator CL model
#  - vvadd-rtl : vector-vector add accelerator RTL model
#  - accum-fl  : accumulator accelerator FL model
#  - accum-cl  : accumulator accelerator CL model
#  - accum-rtl : accumulator accelerator RTL model
#
# For lab2_xcel, the following accelerator impls are available:
#
#  - sort-fl   : sorting accelerator FL model
#  - sort-rtl  : sorting accelerator RTL model
#
# Author : Christopher Batten
# Date   : February 26, 2016
#

# Variables used to make the simulator conditionally work for either
# tut9_xcel and/or lab2_xcel. In our labs repo, we keep both of these
# enabled, but when we release the code for the tutorial and lab we set
# these variables accordingly.

tut9_xcel_enabled = False
lab2_xcel_enabled = True

# Hack to add project root to python path

import os
import sys

sim_dir = os.path.dirname( os.path.abspath( __file__ ) )
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + "pymtl.ini" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)

import argparse
import re
import random

from pymtl3 import *
from pymtl3.passes.backends.verilog import *

from pymtl3.stdlib            import stream
from pymtl3.stdlib.mem        import mk_mem_msg
from pymtl3.stdlib.proc       import SparseMemoryImage, elf_reader
from pymtl3.stdlib.test_utils import config_model_with_cmdline_opts

from proc.test.harness        import TestHarness
from proc.tinyrv2_encoding    import assemble
from proc                     import ProcFL
from proc                     import ProcRTL
from proc                     import NullXcelRTL

from cache                    import BlockingCacheRTL

if tut9_xcel_enabled:
  from tut9_xcel              import VvaddXcelFL
  from tut9_xcel              import VvaddXcelCL
  from tut9_xcel              import VvaddXcelRTL
  from tut9_xcel              import AccumXcelFL
  from tut9_xcel              import AccumXcelCL
  from tut9_xcel              import AccumXcelRTL

if lab2_xcel_enabled:
  from lab2_xcel              import SortXcelFL
  # from lab2_xcel              import SortXcelCL
  from lab2_xcel              import SortXcelRTL

from pmx.ProcMemXcel            import ProcMemXcel
from pmx.ProcXcel               import ProcXcel

#=========================================================================
# Command line processing
#=========================================================================

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help", action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--proc-impl", choices=["fl", "rtl"], default="fl" )
  p.add_argument( "--cache-impl", choices=["null", "rtl"], default="null" )

  xcel_impls = ["null-rtl"]

  if tut9_xcel_enabled:
    xcel_impls.extend([ "vvadd-fl", "vvadd-cl", "vvadd-rtl" ])
    xcel_impls.extend([ "accum-fl", "accum-cl", "accum-rtl" ])

  if lab2_xcel_enabled:
    xcel_impls.extend([ "sort-fl", "sort-cl", "sort-rtl" ])

  p.add_argument( "--xcel-impl", choices=xcel_impls, default="null-rtl" )

  p.add_argument( "--trace",      action="store_true"      )
  p.add_argument( "--trace-regs", action="store_true"      )
  p.add_argument( "--limit",      default=200000, type=int )
  p.add_argument( "--extra-mem-latency", default=0, type=int )
  p.add_argument( "--stats",      action="store_true"      )
  p.add_argument( "--translate",  action="store_true"      )
  p.add_argument( "--dump-vcd",   default=None, nargs="?", const="all", choices=[None, "all", "roi"] )
  p.add_argument( "--dump-vtb",   action="store_true"      )
  p.add_argument( "--perf",       default=0,  type=int )

  p.add_argument( "elf_file" )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#=========================================================================
# TestHarness
#=========================================================================

class TestHarness( Component ):

  #-----------------------------------------------------------------------
  # constructor
  #-----------------------------------------------------------------------

  def construct( s, pmx, caches, extra_mem_latency ):

    # Stats enable signal

    s.stats_en = OutPort()
    s.commit_inst = OutPort()

    # prog2mngr interface. Note simulator only gets output, so we don't
    # need to worry about the mngr2proc interface. The simulator will
    # monitor this interface for handling various message types.

    s.mngr2proc = stream.ifcs.RecvIfcRTL( Bits32 )
    s.proc2mngr = stream.ifcs.SendIfcRTL( Bits32 )

    # Instantiate processor, cache, accelerator

    s.pmx = pmx

    # If pmx does not have any caches, we need a different test memory

    if caches:
      s.mem = stream.MagicMemoryRTL( 2, [ mk_mem_msg(8,32,128) ] * 2, mem_nbytes=1<<28, extra_latency=extra_mem_latency )
    else:
      s.mem = stream.MagicMemoryRTL( 3, [ mk_mem_msg(8,32,32) ] * 3, mem_nbytes=1<<28, extra_latency=extra_mem_latency )

    # Bring the stats enable up to the top level

    s.stats_en    //= s.pmx.stats_en
    s.commit_inst //= s.pmx.commit_inst

    # Processor <-> Proc/Mngr

    s.mngr2proc //= s.pmx.mngr2proc
    s.proc2mngr //= s.pmx.proc2mngr

    # PMX Caches <-> Memory

    s.pmx.imem //= s.mem.ifc[0]
    s.pmx.dmem //= s.mem.ifc[1]

    if not caches:
      # PMX directly to memory with no caches
      s.pmx.xmem //= s.mem.ifc[2]

  #-----------------------------------------------------------------------
  # load memory image
  #-----------------------------------------------------------------------

  def load( self, mem_image ):
    sections = mem_image.get_sections()
    for section in sections:
      start_addr = section.addr
      stop_addr  = section.addr + len(section.data)
      self.mem.mem.mem[start_addr:stop_addr] = section.data

  #-----------------------------------------------------------------------
  # line trace
  #-----------------------------------------------------------------------

  def line_trace( s ):
    return ("-" if s.stats_en else " ") + \
           s.pmx.line_trace() + " | " + \
           str(s.mem.ifc[0]) + \
           str(s.mem.ifc[1])

#=========================================================================
# Main
#=========================================================================

def main():

  try:
    import pypyjit
    pypyjit.set_param("off")
  except:
    pass

  opts = parse_cmdline()

  #-----------------------------------------------------------------------
  # Load the elf file and do some hacky binary rewriting
  #-----------------------------------------------------------------------

  # Open elf binary

  mem_image = None
  with open(opts.elf_file,'rb') as file_obj:
    mem_image = elf_reader( file_obj )

  #-----------------------------------------------------------------------
  # Setup simulator
  #-----------------------------------------------------------------------

  # Determine which processor model to use in the simulator

  proc_impl_dict = {
    "fl"  : ProcFL,
    "rtl" : ProcRTL,
  }

  # Determine which accelerator model to use in the simulator

  xcel_impl_dict = {
    "null-rtl"  : NullXcelRTL,
  }

  if tut9_xcel_enabled:
    xcel_impl_dict["vvadd-fl"]  = VvaddXcelFL
    xcel_impl_dict["vvadd-cl"]  = VvaddXcelCL
    xcel_impl_dict["vvadd-rtl"] = VvaddXcelRTL
    xcel_impl_dict["accum-fl"]  = AccumXcelFL
    xcel_impl_dict["accum-cl"]  = AccumXcelCL
    xcel_impl_dict["accum-rtl"] = AccumXcelRTL

  if lab2_xcel_enabled:
    xcel_impl_dict["sort-fl"]   = SortXcelFL
    # xcel_impl_dict["sort-cl"]   = SortXcelCL
    xcel_impl_dict["sort-rtl"]  = SortXcelRTL

  # Check if translation is valid

  if opts.translate:
    if    not opts.proc_impl == "rtl"  \
       or not opts.xcel_impl.endswith("rtl"):

      print("\n ERROR: --translate only works with RTL models \n")
      exit(1)

  if opts.dump_vtb:
    if not opts.translate:
      print("\n ERROR: --dump-vtb needs --translate \n")
      exit(1)

  # Create test harness with caches

  if opts.cache_impl != "null":

    # If we have RTL cache, we'd want every part to be RTL

    # if    not opts.proc_impl == "rtl"  \
       # or not opts.xcel_impl.endswith("rtl"):

      # print("\n ERROR: when cache-impl is RTL, we need RTL proc and RTL xcel!\n")
      # exit(1)

    pmx = ProcMemXcel( proc_impl_dict[ opts.proc_impl ](),
                       BlockingCacheRTL(), BlockingCacheRTL(),
                       xcel_impl_dict[ opts.xcel_impl ]() )
    pmx.set_metadata( VerilogTranslationPass.explicit_module_name,
                      'ProcMemXcel_' + opts.xcel_impl.replace('-','_') )
    # pmx.set_metadata( VerilogVerilatorImportPass.vl_trace, True )

    model = TestHarness( pmx, caches=True, extra_mem_latency=opts.extra_mem_latency )

  # Create test harness with no caches

  else:
    pmx = ProcXcel( proc_impl_dict[ opts.proc_impl ](),
                    xcel_impl_dict[ opts.xcel_impl ]() )

    pmx.set_metadata( VerilogTranslationPass.explicit_module_name,
                      'ProcXcel_' + opts.xcel_impl.replace('-','_') )

    model = TestHarness( pmx, caches=False, extra_mem_latency=opts.extra_mem_latency )

  unique_name = f'{opts.xcel_impl}-{os.path.basename( opts.elf_file )}'

  # Check for dump_vcd and generate vcd filename, on-demand vcd enable portname
  if opts.dump_vcd is None:
    vcd_filename = ""
    on_demand_vcd_portname = ""
  elif opts.dump_vcd == "all":
    vcd_filename = f"pmx-sim-{unique_name}.vcd"
    on_demand_vcd_portname = ""
  elif opts.dump_vcd == "roi":
    vcd_filename = f"pmx-sim-{unique_name}.roi.vcd"
    on_demand_vcd_portname = "stats_en"
    if not opts.translate:
      print(f"\n ERROR: --dump-vcd roi requires --translate\n")
      exit(1)
  else:
    print(f"\n ERROR: --dump-vcd has unexpected value {opts.dump_vcd}\n")
    exit(1)

  cmdline_opts = {
    'dump_vcd': vcd_filename,
    'dump_vtb': f"pmx-sim-{unique_name}" if opts.dump_vtb else '',
    'test_verilog': 'zeros' if opts.translate else '',
    'on_demand_vcd_portname' : on_demand_vcd_portname,
  }

  model.elaborate()
  model.pmx.set_metadata( VerilogVerilatorImportPass.fast, True )

  config_model_with_cmdline_opts( model, cmdline_opts, ['pmx'] )

  # Load the program into the model

  model.load( mem_image )

  # Create a simulator
  from pymtl3.passes.mamba import Mamba2020
  model.apply( Mamba2020( print_line_trace=opts.trace ) )

  try:
    import pypyjit
    pypyjit.set_param("default")
    pypyjit.set_param("trace_limit=100000000")
  except:
    pass

  # Reset test harness

  model.sim_reset()

  # We are always ready to accept a proc2mngr message

  model.proc2mngr.rdy @= 1

  #-----------------------------------------------------------------------
  # Run the simulation
  #-----------------------------------------------------------------------

  num_cycles = 0
  num_insts  = 0
  count      = 0

  # Storage for extra three messages on failure

  app_fail_xtra       = False
  app_fail_xtra_count = 0
  app_fail_xtra_msgs  = [ None, None, None ]

  # Storage for print

  app_print           = False
  app_print_type      = None  # 0: int, 1: char, 2: string

  import timeit
  start_time = timeit.default_timer()

  last_time = start_time
  while count < opts.limit:
    count = count + 1

    if opts.perf > 0 and count % opts.perf == 0:
      this_time = timeit.default_timer()
      print( f"cycle {count-opts.perf}-{count}: {opts.perf/(this_time - last_time)}")
      last_time = this_time

    # Line trace will be automatically printed

    # Update cycle count

    if model.stats_en:
      num_cycles += 1

      if model.commit_inst:
        num_insts += 1

    # Check the proc2mngr interface

    if model.proc2mngr.val:

      msg_type = model.proc2mngr.msg[16:32]
      msg_xtra = model.proc2mngr.msg[ 0:16]

      # First we check if we are gathering app_fail_xtra_msgs

      if app_fail_xtra:
        app_fail_xtra_msgs[ app_fail_xtra_count ] = model.proc2mngr.msg[:]
        app_fail_xtra_count += 1
        if app_fail_xtra_count == 3:
          print( "" )
          print( "  [ FAILED ] dest[{0}] != ref[{0}] ({1} != {2})" \
                  .format( int(app_fail_xtra_msgs[0]),
                           int(app_fail_xtra_msgs[1]),
                           int(app_fail_xtra_msgs[2]) ) )
          print( "" )
          exit(1)

      # Then we check if we are doing a print

      elif app_print:

        # Print int

        if app_print_type == 0:
          print( model.proc2mngr.msg[:].uint(), end='' )
          app_print = False

        if app_print_type == 1:
          print( chr(model.proc2mngr.msg[:].uint()), end='' )
          app_print = False

        if app_print_type == 2:
          char_as_num = model.proc2mngr.msg[:].uint()
          if char_as_num > 0:
            print( chr(char_as_num), end='' )
          else:
            app_print = False

      # Message is from an assembly test

      elif msg_type == 0:

        if msg_xtra == 0:
          print( "" )
          print( "  [ passed ]" )
          print( "" )
          break

        else:
          print( "" )
          print( "  [ FAILED ] error on line {}".format(msg_xtra.uint()) )
          print( "" )
          exit(1)

      # Message is from a bmark

      elif msg_type == 1:

        if msg_xtra == 0:
          break
        else:
          exit( msg_xtra.uint() )

      # Message is from a bmark

      elif msg_type == 2:

        if msg_xtra == 0:
          print( "" )
          print( "  [ passed ]" )
          print( "" )
          break

        else:
          app_fail_xtra = True

      # Message is from print

      elif msg_type == 3:
        app_print = True
        app_print_type = msg_xtra
        if app_print_type not in [0,1,2]:
          print("ERROR: received unrecognized app print type!")
          exit(1)

    # Tick the simulator

    model.sim_tick()

  end_time = timeit.default_timer()

  #-----------------------------------------------------------------------
  # Post processing
  #-----------------------------------------------------------------------

  # Force a test failure if we timed out

  if count >= opts.limit:
    print("""
   ERROR: Exceeded maximum number of cycles ({}). Your
   application might be in an infinite loop, or you need to use the
   --limit command line option to increase the limit.
    """.format(opts.limit))
    exit(1)

  # Display stats

  if opts.stats:
    print("num_cycles = ", num_cycles)
    print("num_insts_on_processor = ", num_insts)

  if opts.perf > 0:
    print()
    print( "---------- Simulation performance ----------" )
    print( "- Total cycles   : %d cycles" % count )
    print( "- Execution time : %.5f seconds" % (end_time - start_time) )
    print( "- Cycle/second   : %.2f cps" % (count/(end_time - start_time)) )
    print()

  exit(0)

main()

