#!/usr/bin/env python
#=========================================================================
# sort-sim [options]
#=========================================================================
#
#  -h --help           Display this message
#
#  --impl              {cl,rtl-flat,rtl-struct}
#  --input <dataset>   {random,sorted-fwd,sorted-rev,zeros}
#  --trace             Display line tracing
#  --stats             Display statistics
#  --translate         Translate RTL model to Verilog
#  --dump-vcd          Dump VCD to sort-<impl>-<input>.vcd
#
# Author : Christopher Batten, Shunning Jiang
# Date   : Jan 23, 2020
#

# Hack to add project root to python path

import os
import sys

sim_dir = os.path.dirname( os.path.abspath( __file__ ) )
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + "pymtl.ini" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)

import argparse
import re

from random import randint

from pymtl3                            import *
from pymtl3.passes.backends.verilog    import *
from pymtl3.stdlib.test_utils          import config_model_with_cmdline_opts
from .SpmvXcelFL  import SpmvXcelFL

#-------------------------------------------------------------------------
# Inputs
#-------------------------------------------------------------------------

rows_mini       = [ 0, 2, 2, 5, 7 ]
cols_mini       = [ 0, 2, 0, 2, 3, 1, 3 ]
vector_mini     = [ 1, 4, 6, 12 ]
vals_mini       = [ 1, 2, 1, 2, 3, 1, 2 ]

rows_mega       = [ 0, 0, 0, 1, 1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 8, 8, 9, 9, 9, 10, 12, 13, 13, 14, 15, 15, 16, 16, 17, 18, 19, 19, 19 ]
cols_mega       = [ 2, 6, 9, 21, 18, 15, 15, 10, 6, 21, 5, 1, 27, 26, 31, 27, 11, 3, 2, 17 ]
vals_mega       = [ 25, 41, 27, 2, 61, 95, 41, 61, 35, 32, 46, 72, 50, 9, 51, 23, 93, 24, 74, 66 ]
vector_mega     = [ 700, 234, 640, 523, 164, 794, 398, 229, 72, 372, 792, 14, 772, 771, 77, 853, 816, 981, 439, 372, 303, 797, 34, 141, 547, 441, 596, 778, 439, 672, 824, 114 ]

rows_mega_mega  = [ 0, 1, 4, 7, 9, 10, 12, 16, 20, 23, 26, 29, 33, 38, 41, 42, 46, 49, 57, 59, 62, 65, 71, 74, 76, 78, 80, 82, 85, 96, 99, 102, 106, 108, 113, 115, 118, 119, 124, 128, 129, 131, 133, 137, 143, 145, 149, 154, 156, 160, 165, 169, 172, 174, 176, 178, 182, 183, 189, 191, 194, 199, 203, 204, 207, 209, 214, 219, 224, 226, 229, 233, 234, 235, 241, 243, 245, 247, 252, 256, 258, 260, 262, 263, 265, 271, 277, 280, 284, 287, 290, 296, 300, 305, 307, 311, 314, 317, 319, 321, 324, 330, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334 ]
cols_mega_mega  = [ 122, 28, 72, 108, 35, 67, 127, 26, 113, 107, 74, 98, 2, 97, 98, 111, 92, 98, 99, 114, 37, 72, 81, 26, 46, 114, 53, 63, 87, 1, 66, 118, 123, 28, 62, 119, 124, 126, 60, 75, 119, 94, 33, 48, 95, 100, 15, 67, 75, 8, 39, 41, 72, 73, 96, 102, 117, 28, 48, 1, 16, 125, 64, 75, 126, 5, 37, 45, 64, 96, 107, 24, 102, 124, 14, 113, 68, 118, 79, 123, 87, 88, 35, 55, 70, 23, 45, 46, 52, 78, 79, 80, 88, 104, 110, 118, 41, 106, 118, 34, 93, 105, 11, 64, 71, 116, 11, 33, 28, 63, 89, 104, 120, 89, 93, 15, 46, 125, 113, 0, 1, 8, 12, 90, 26, 30, 86, 101, 100, 52, 99, 55, 73, 18, 19, 62, 100, 21, 48, 53, 67, 90, 97, 60, 95, 14, 58, 79, 80, 12, 48, 55, 90, 106, 26, 45, 20, 41, 69, 88, 48, 55, 60, 91, 93, 28, 46, 109, 117, 8, 9, 92, 89, 103, 18, 46, 32, 44, 14, 36, 53, 94, 60, 41, 63, 71, 79, 114, 123, 13, 88, 26, 30, 51, 4, 48, 52, 79, 96, 40, 47, 88, 113, 45, 17, 49, 122, 18, 109, 22, 50, 61, 65, 76, 1, 57, 83, 122, 125, 1, 39, 42, 95, 100, 12, 80, 14, 26, 123, 33, 40, 116, 123, 102, 54, 9, 13, 32, 98, 107, 121, 16, 125, 8, 113, 7, 24, 4, 10, 45, 61, 117, 2, 21, 25, 30, 1, 111, 63, 79, 56, 114, 57, 47, 96, 3, 7, 51, 67, 116, 121, 0, 8, 12, 48, 64, 100, 10, 23, 52, 2, 83, 109, 115, 74, 79, 100, 22, 42, 89, 12, 37, 73, 84, 99, 106, 13, 60, 79, 123, 0, 41, 46, 48, 113, 13, 126, 85, 92, 100, 108, 76, 94, 95, 62, 67, 122, 53, 60, 12, 61, 5, 69, 97, 39, 61, 75, 86, 104, 119, 12, 27, 79, 115 ]
vals_mega_mega  = [ 65, 78, 29, 91, 67, 54, 65, 82, 34, 97, 60, 83, 11, 48, 11, 96, 25, 83, 69, 61, 17, 6, 22, 50, 52, 72, 88, 31, 30, 18, 30, 53, 79, 77, 1, 51, 11, 82, 52, 88, 3, 6, 99, 50, 19, 9, 63, 46, 59, 17, 88, 54, 11, 7, 14, 98, 65, 9, 37, 8, 42, 13, 15, 90, 95, 3, 77, 61, 40, 56, 80, 17, 44, 28, 5, 60, 72, 38, 13, 97, 100, 27, 86, 44, 16, 46, 51, 13, 43, 23, 89, 87, 19, 18, 29, 28, 72, 53, 41, 68, 38, 49, 76, 80, 62, 38, 79, 98, 31, 80, 59, 64, 98, 41, 3, 41, 83, 17, 53, 20, 12, 83, 72, 59, 95, 6, 31, 20, 74, 87, 53, 23, 4, 88, 19, 1, 1, 45, 30, 21, 40, 38, 64, 10, 78, 68, 44, 22, 5, 62, 85, 68, 30, 38, 34, 28, 57, 84, 63, 76, 20, 65, 71, 79, 88, 69, 97, 60, 87, 82, 79, 34, 75, 8, 4, 4, 9, 96, 18, 15, 49, 63, 67, 5, 5, 43, 23, 76, 74, 58, 100, 53, 26, 25, 21, 33, 69, 6, 34, 95, 7, 8, 87, 18, 13, 85, 11, 88, 83, 21, 85, 11, 1, 20, 8, 47, 85, 54, 17, 19, 42, 22, 29, 9, 14, 89, 19, 100, 22, 4, 77, 27, 15, 85, 51, 47, 37, 44, 56, 64, 53, 19, 85, 59, 12, 89, 53, 1, 80, 61, 46, 5, 68, 83, 70, 5, 22, 12, 19, 2, 18, 52, 3, 32, 57, 10, 68, 99, 41, 33, 58, 92, 10, 34, 8, 19, 90, 16, 72, 89, 23, 82, 23, 96, 58, 47, 65, 32, 41, 6, 1, 80, 50, 39, 79, 32, 3, 49, 47, 70, 61, 29, 67, 62, 75, 79, 64, 81, 100, 46, 37, 44, 3, 44, 13, 49, 12, 36, 86, 43, 7, 52, 1, 99, 58, 91, 57, 2, 8, 55, 31, 47, 83, 33 ]
vector_mega_mega= [ 26, 44, 55, 84, 9, 47, 96, 64, 68, 41, 59, 77, 87, 79, 65, 89, 39, 23, 5, 37, 28, 29, 40, 87, 37, 29, 77, 65, 46, 98, 21, 9, 85, 38, 10, 43, 72, 43, 13, 68, 69, 14, 25, 2, 39, 5, 44, 31, 60, 22, 92, 13, 59, 11, 80, 32, 63, 98, 89, 30, 60, 15, 88, 26, 75, 50, 11, 37, 2, 99, 50, 93, 32, 92, 48, 35, 50, 30, 67, 53, 67, 54, 61, 76, 22, 17, 7, 44, 59, 19, 12, 40, 9, 57, 39, 20, 96, 27, 80, 87, 16, 13, 12, 9, 8, 92, 70, 67, 83, 75, 45, 92, 84, 25, 60, 30, 19, 69, 93, 61, 61, 80, 76, 58, 58, 65, 67, 7 ]

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help",    action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--impl", default="rtl-flat",
    choices=["cl","rtl-flat","rtl-struct"] )

  p.add_argument( "--input", default="mini",
    choices=["mini","mega","mega-mega"] )

  p.add_argument( "--trace",     action="store_true" )
  p.add_argument( "--stats",     action="store_true" )
  p.add_argument( "--translate", action="store_true" )
  p.add_argument( "--dump-vcd",  action="store_true" )
  p.add_argument( "--dump-vtb",  action="store_true" )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#-------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------

def main():
  opts = parse_cmdline()

  # Create input datasets

  ninputs = 100
  
  input_rows = []
  input_cols = []
  input_vals = []
  
  input_vector = []

  if opts.input == "mini":
    input_rows   = rows_mini
    input_cols   = cols_mini
    input_vals   = vals_mini
    input_vector = vector_mini

  elif opts.input == "mega":
    input_rows   = rows_mega
    input_cols   = cols_mega
    input_vals   = vals_mega
    input_vector = vector_mega

  elif opts.input == "mega-mega":
    input_rows   = rows_mega_mega
    input_cols   = cols_mega_mega
    input_vals   = vals_mega_mega
    input_vector = vector_mega_mega

  # Instantiate the model

  model_impl_dict = {
    'fl'         : SpmvXcelFL,
    'rtl'        : SpmvXcelRTL,
  }

  model = model_impl_dict[ opts.impl ]()

  # Check if translation is valid

  if opts.translate and not opts.impl.startswith("rtl"):
    print("\n ERROR: --translate only works with RTL models \n")
    exit(1)

  if opts.dump_vtb:
    if not opts.translate:
      print("\n ERROR: --dump-vtb needs --translate \n")
      exit(1)

  # Create VCD filename

  unique_name = f"sort-{opts.impl}-{opts.input}"

  cmdline_opts = {
    'dump_vcd': f"{unique_name}" if opts.dump_vcd else '',
    'dump_vtb': f"{unique_name}" if opts.dump_vtb else '',
    'test_verilog': 'zeros' if opts.translate else '',
  }

  # Configure the model

  model = e( model, cmdline_opts, duts=[] )

  # Apply necessary passes

  # Create a simulator
  model.apply( DefaultPassGroup( linetrace=opts.trace ) )

  model.sim_reset()

  # Tick simulator until evaluation is finished

  counter = 0
  while counter < ninputs:

    if model.out_val:
      counter += 1

    if inputs:
      model.in_val @= 1
      for i,v in enumerate( inputs.pop() ):
        model.in_[i] @= v

    else:
      model.in_val @= 0
      for i in range(4):
        model.in_[i] @= 0

    model.sim_eval_combinational()

    model.sim_tick()

  # Report various statistics

  if opts.stats:
    print()
    print( "num_cycles          = {}".format( model.sim_cycle_count() ) )
    print( "num_cycles_per_sort = {:1.2f}".format( model.sim_cycle_count()/(1.0*ninputs) ) )

main()

