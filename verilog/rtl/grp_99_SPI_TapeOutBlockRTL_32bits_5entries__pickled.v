//-------------------------------------------------------------------------
// grp_99_SPI_TapeOutBlockRTL_32bits_5entries.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL yosys-SystemVerilog translation pass.

// PyMTL Component BlockPlaceholderPRTL Definition
// At /home/acm289/project-group99/sim/tapeout/BlockPlaceholderPRTL.py
module BlockPlaceholderPRTL__nbits_32
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  input  logic [31:0]   recv__msg,
  output logic [0:0]    recv__rdy,
  input  logic [0:0]    recv__val,
  output logic [31:0]   send__msg,
  input  logic [0:0]    send__rdy,
  output logic [0:0]    send__val
);

  // Connections
  assign send__msg = recv__msg;
  assign recv__rdy = send__rdy;
  assign send__val = recv__val;

endmodule


// PyMTL Component LoopThroughPRTL Definition
// At /home/acm289/project-group99/sim/SPI_v3/components/LoopThroughPRTL.py
module LoopThroughPRTL__nbits_32
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  input  logic [0:0]    sel,
  output logic [31:0]   downstream__req__msg,
  input  logic [0:0]    downstream__req__rdy,
  output logic [0:0]    downstream__req__val,
  input  logic [31:0]   downstream__resp__msg,
  output logic [0:0]    downstream__resp__rdy,
  input  logic [0:0]    downstream__resp__val,
  input  logic [31:0]   upstream__req__msg,
  output logic [0:0]    upstream__req__rdy,
  input  logic [0:0]    upstream__req__val,
  output logic [31:0]   upstream__resp__msg,
  input  logic [0:0]    upstream__resp__rdy,
  output logic [0:0]    upstream__resp__val
);

  // PyMTL Lambda Block Source
  // At /home/acm289/project-group99/sim/SPI_v3/components/LoopThroughPRTL.py:42
  // s.downstream.req.val //= lambda: 0 if (s.sel) else s.upstream.req.val
  
  always_comb begin : _lambda__s_spi_min_stack_loopthrough_downstream_req_val
    downstream__req__val = sel ? 1'd0 : upstream__req__val;
  end

  // PyMTL Lambda Block Source
  // At /home/acm289/project-group99/sim/SPI_v3/components/LoopThroughPRTL.py:47
  // s.downstream.resp.rdy //= lambda: 0 if (s.sel) else s.upstream.resp.rdy 
  
  always_comb begin : _lambda__s_spi_min_stack_loopthrough_downstream_resp_rdy
    downstream__resp__rdy = sel ? 1'd0 : upstream__resp__rdy;
  end

  // PyMTL Lambda Block Source
  // At /home/acm289/project-group99/sim/SPI_v3/components/LoopThroughPRTL.py:45
  // s.upstream.req.rdy //= lambda: s.upstream.resp.rdy if (s.sel) else s.downstream.req.rdy 
  
  always_comb begin : _lambda__s_spi_min_stack_loopthrough_upstream_req_rdy
    upstream__req__rdy = sel ? upstream__resp__rdy : downstream__req__rdy;
  end

  // PyMTL Lambda Block Source
  // At /home/acm289/project-group99/sim/SPI_v3/components/LoopThroughPRTL.py:40
  // s.upstream.resp.msg //= lambda: s.upstream.req.msg if (s.sel) else s.downstream.resp.msg
  
  always_comb begin : _lambda__s_spi_min_stack_loopthrough_upstream_resp_msg
    upstream__resp__msg = sel ? upstream__req__msg : downstream__resp__msg;
  end

  // PyMTL Lambda Block Source
  // At /home/acm289/project-group99/sim/SPI_v3/components/LoopThroughPRTL.py:39
  // s.upstream.resp.val //= lambda: s.upstream.req.val if (s.sel) else s.downstream.resp.val
  
  always_comb begin : _lambda__s_spi_min_stack_loopthrough_upstream_resp_val
    upstream__resp__val = sel ? upstream__req__val : downstream__resp__val;
  end

  // Connections
  assign downstream__req__msg = upstream__req__msg;

endmodule


// PyMTL Component NormalQueueCtrlRTL Definition
// At /classes/ece5745/install/venv-pkgs/x86_64-rhel7/pypy3-pymtl3-7.3.3/site-packages/pymtl3/stdlib/stream/queues.py
module NormalQueueCtrlRTL__num_entries_5
(
  input  logic [0:0]    clk,
  output logic [2:0]    count,
  output logic [2:0]    raddr,
  output logic [0:0]    recv_rdy,
  input  logic [0:0]    recv_val,
  input  logic [0:0]    reset,
  input  logic [0:0]    send_rdy,
  output logic [0:0]    send_val,
  output logic [2:0]    waddr,
  output logic [0:0]    wen
);
  // Wire declarations
  logic [2:0]    head;
  logic [0:0]    recv_xfer;
  logic [0:0]    send_xfer;
  logic [2:0]    tail;

  // PyMTL Lambda Block Source
  // At /classes/ece5745/install/venv-pkgs/x86_64-rhel7/pypy3-pymtl3-7.3.3/site-packages/pymtl3/stdlib/stream/queues.py:121
  // s.recv_rdy  //= lambda: s.count < num_entries
  
  always_comb begin : _lambda__s_spi_min_stack_minion_adapter_cm_q_ctrl_recv_rdy
    recv_rdy = count < 3'd5;
  end

  // PyMTL Lambda Block Source
  // At /classes/ece5745/install/venv-pkgs/x86_64-rhel7/pypy3-pymtl3-7.3.3/site-packages/pymtl3/stdlib/stream/queues.py:124
  // s.recv_xfer //= lambda: s.recv_val & s.recv_rdy
  
  always_comb begin : _lambda__s_spi_min_stack_minion_adapter_cm_q_ctrl_recv_xfer
    recv_xfer = recv_val & recv_rdy;
  end

  // PyMTL Lambda Block Source
  // At /classes/ece5745/install/venv-pkgs/x86_64-rhel7/pypy3-pymtl3-7.3.3/site-packages/pymtl3/stdlib/stream/queues.py:122
  // s.send_val  //= lambda: s.count > 0
  
  always_comb begin : _lambda__s_spi_min_stack_minion_adapter_cm_q_ctrl_send_val
    send_val = count > 3'd0;
  end

  // PyMTL Lambda Block Source
  // At /classes/ece5745/install/venv-pkgs/x86_64-rhel7/pypy3-pymtl3-7.3.3/site-packages/pymtl3/stdlib/stream/queues.py:125
  // s.send_xfer //= lambda: s.send_val & s.send_rdy
  
  always_comb begin : _lambda__s_spi_min_stack_minion_adapter_cm_q_ctrl_send_xfer
    send_xfer = send_val & send_rdy;
  end

  // PyMTL Update Block Source
  // At /classes/ece5745/install/venv-pkgs/x86_64-rhel7/pypy3-pymtl3-7.3.3/site-packages/pymtl3/stdlib/stream/queues.py:127
  // @update_ff
  // def up_reg():
  // 
  //   if s.reset:
  //     s.head  <<= 0
  //     s.tail  <<= 0
  //     s.count <<= 0
  // 
  //   else:
  //     if s.recv_xfer:
  //       s.tail <<= s.tail + 1 if ( s.tail < num_entries - 1 ) else 0
  // 
  //     if s.send_xfer:
  //       s.head <<= s.head + 1 if ( s.head < num_entries -1 ) else 0
  // 
  //     if s.recv_xfer & ~s.send_xfer:
  //       s.count <<= s.count + 1
  //     elif ~s.recv_xfer & s.send_xfer:
  //       s.count <<= s.count - 1
  
  always_ff @(posedge clk) begin : up_reg
    if ( reset ) begin
      head <= 3'd0;
      tail <= 3'd0;
      count <= 3'd0;
    end
    else begin
      if ( recv_xfer ) begin
        tail <= ( tail < ( 3'd5 - 3'd1 ) ) ? tail + 3'd1 : 3'd0;
      end
      if ( send_xfer ) begin
        head <= ( head < ( 3'd5 - 3'd1 ) ) ? head + 3'd1 : 3'd0;
      end
      if ( recv_xfer & ( ~send_xfer ) ) begin
        count <= count + 3'd1;
      end
      else if ( ( ~recv_xfer ) & send_xfer ) begin
        count <= count - 3'd1;
      end
    end
  end

  // Connections
  assign wen = recv_xfer;
  assign waddr = tail;
  assign raddr = head;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_Bits32__nregs_5__rd_ports_1__wr_ports_1__const_zero_False
// At /classes/ece5745/install/venv-pkgs/x86_64-rhel7/pypy3-pymtl3-7.3.3/site-packages/pymtl3/stdlib/basic_rtl/register_files.py
module RegisterFile__35272b4450df532b
(
  input  logic [0:0]    clk,
  input  logic [2:0]    raddr__0,
  output logic [31:0]   rdata__0,
  input  logic [0:0]    reset,
  input  logic [2:0]    waddr__0,
  input  logic [31:0]   wdata__0,
  input  logic [0:0]    wen__0
);
  // Struct/Array ports in the form of wires
  logic [2:0]    raddr [0:0];
  logic [31:0]   rdata [0:0];
  logic [2:0]    waddr [0:0];
  logic [31:0]   wdata [0:0];
  logic [0:0]    wen [0:0];

  // Wire declarations
  logic [31:0]   regs [0:4];

  // PyMTL Update Block Source
  // At /classes/ece5745/install/venv-pkgs/x86_64-rhel7/pypy3-pymtl3-7.3.3/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  integer __loopvar__up_rf_read_i;
  
  always_comb begin : up_rf_read
    for ( __loopvar__up_rf_read_i = 1'd0; __loopvar__up_rf_read_i < 1'd1; __loopvar__up_rf_read_i = __loopvar__up_rf_read_i + 1'd1 )
      rdata[1'(__loopvar__up_rf_read_i)] = regs[raddr[1'(__loopvar__up_rf_read_i)]];
  end

  // PyMTL Update Block Source
  // At /classes/ece5745/install/venv-pkgs/x86_64-rhel7/pypy3-pymtl3-7.3.3/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  integer __loopvar__up_rf_write_i;
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( __loopvar__up_rf_write_i = 1'd0; __loopvar__up_rf_write_i < 1'd1; __loopvar__up_rf_write_i = __loopvar__up_rf_write_i + 1'd1 )
      if ( wen[1'(__loopvar__up_rf_write_i)] ) begin
        regs[waddr[1'(__loopvar__up_rf_write_i)]] <= wdata[1'(__loopvar__up_rf_write_i)];
      end
  end

  // Connections
  assign raddr[0] = raddr__0;
  assign rdata__0 = rdata[0];
  assign waddr[0] = waddr__0;
  assign wdata[0] = wdata__0;
  assign wen[0] = wen__0;

endmodule


// PyMTL Component NormalQueueDpathRTL Definition
// At /classes/ece5745/install/venv-pkgs/x86_64-rhel7/pypy3-pymtl3-7.3.3/site-packages/pymtl3/stdlib/stream/queues.py
module NormalQueueDpathRTL__EntryType_Bits32__num_entries_5
(
  input  logic [0:0]    clk,
  input  logic [2:0]    raddr,
  input  logic [31:0]   recv_msg,
  input  logic [0:0]    reset,
  output logic [31:0]   send_msg,
  input  logic [2:0]    waddr,
  input  logic [0:0]    wen
);
  // Struct/Array ports of sub-components in the form of wires
  logic [2:0]    rf__raddr [0:0];
  logic [31:0]   rf__rdata [0:0];
  logic [2:0]    rf__waddr [0:0];
  logic [31:0]   rf__wdata [0:0];
  logic [0:0]    rf__wen [0:0];

  // Sub-component declarations
  logic [0:0]    rf__clk;
  logic [2:0]    rf__raddr__0;
  logic [31:0]   rf__rdata__0;
  logic [0:0]    rf__reset;
  logic [2:0]    rf__waddr__0;
  logic [31:0]   rf__wdata__0;
  logic [0:0]    rf__wen__0;

  RegisterFile__35272b4450df532b rf
  (
    .clk            (          rf__clk          ),
    .raddr__0       (        rf__raddr__0       ),
    .rdata__0       (        rf__rdata__0       ),
    .reset          (         rf__reset         ),
    .waddr__0       (        rf__waddr__0       ),
    .wdata__0       (        rf__wdata__0       ),
    .wen__0         (         rf__wen__0        )
  );

  // Connect struct/array ports and their wire forms
  assign rf__raddr__0 = rf__raddr[0];
  assign rf__rdata[0] = rf__rdata__0;
  assign rf__waddr__0 = rf__waddr[0];
  assign rf__wdata__0 = rf__wdata[0];
  assign rf__wen__0 = rf__wen[0];

  // Connections
  assign rf__clk = clk;
  assign rf__reset = reset;
  assign rf__raddr[0] = raddr;
  assign send_msg = rf__rdata[0];
  assign rf__wen[0] = wen;
  assign rf__waddr[0] = waddr;
  assign rf__wdata[0] = recv_msg;

endmodule


// PyMTL Component NormalQueueRTL Definition
// At /classes/ece5745/install/venv-pkgs/x86_64-rhel7/pypy3-pymtl3-7.3.3/site-packages/pymtl3/stdlib/stream/queues.py
module NormalQueueRTL__EntryType_Bits32__num_entries_5
(
  input  logic [0:0]    clk,
  output logic [2:0]    count,
  input  logic [0:0]    reset,
  input  logic [31:0]   recv__msg,
  output logic [0:0]    recv__rdy,
  input  logic [0:0]    recv__val,
  output logic [31:0]   send__msg,
  input  logic [0:0]    send__rdy,
  output logic [0:0]    send__val
);
  // Sub-component declarations
  logic [0:0]    ctrl__clk;
  logic [2:0]    ctrl__count;
  logic [2:0]    ctrl__raddr;
  logic [0:0]    ctrl__recv_rdy;
  logic [0:0]    ctrl__recv_val;
  logic [0:0]    ctrl__reset;
  logic [0:0]    ctrl__send_rdy;
  logic [0:0]    ctrl__send_val;
  logic [2:0]    ctrl__waddr;
  logic [0:0]    ctrl__wen;

  NormalQueueCtrlRTL__num_entries_5 ctrl
  (
    .clk            (         ctrl__clk         ),
    .count          (        ctrl__count        ),
    .raddr          (        ctrl__raddr        ),
    .recv_rdy       (       ctrl__recv_rdy      ),
    .recv_val       (       ctrl__recv_val      ),
    .reset          (        ctrl__reset        ),
    .send_rdy       (       ctrl__send_rdy      ),
    .send_val       (       ctrl__send_val      ),
    .waddr          (        ctrl__waddr        ),
    .wen            (         ctrl__wen         )
  );

  logic [0:0]    dpath__clk;
  logic [2:0]    dpath__raddr;
  logic [31:0]   dpath__recv_msg;
  logic [0:0]    dpath__reset;
  logic [31:0]   dpath__send_msg;
  logic [2:0]    dpath__waddr;
  logic [0:0]    dpath__wen;

  NormalQueueDpathRTL__EntryType_Bits32__num_entries_5 dpath
  (
    .clk            (         dpath__clk        ),
    .raddr          (        dpath__raddr       ),
    .recv_msg       (      dpath__recv_msg      ),
    .reset          (        dpath__reset       ),
    .send_msg       (      dpath__send_msg      ),
    .waddr          (        dpath__waddr       ),
    .wen            (         dpath__wen        )
  );

  // Connections
  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__recv_val = recv__val;
  assign recv__rdy = ctrl__recv_rdy;
  assign dpath__recv_msg = recv__msg;
  assign send__val = ctrl__send_val;
  assign ctrl__send_rdy = send__rdy;
  assign send__msg = dpath__send_msg;
  assign count = ctrl__count;

endmodule


// PyMTL Component SPIMinionAdapterPRTL Definition
// At /home/acm289/project-group99/sim/SPI_v3/components/SPIMinionAdapterPRTL.py
module SPIMinionAdapterPRTL__nbits_34__num_entries_5
(
  input  logic [0:0]    clk,
  output logic [0:0]    parity,
  input  logic [0:0]    reset,
  input  logic [0:0]    pull__en,
  output logic [0:0]    pull__msg__val,
  output logic [0:0]    pull__msg__spc,
  output logic [31:0]   pull__msg__data,
  input  logic [0:0]    push__en,
  input  logic [0:0]    push__msg__val_wrt,
  input  logic [0:0]    push__msg__val_rd,
  input  logic [31:0]   push__msg__data,
  input  logic [31:0]   recv__msg,
  output logic [0:0]    recv__rdy,
  input  logic [0:0]    recv__val,
  output logic [31:0]   send__msg,
  input  logic [0:0]    send__rdy,
  output logic [0:0]    send__val
);
  // Struct/Array ports in the form of wires
  logic [33:0]   pull__msg;
  logic [33:0]   push__msg;

  // Wire declarations
  logic [0:0]    cm_send_rdy;
  logic [0:0]    mc_recv_val;
  logic [0:0]    open_entries;

  // Sub-component declarations
  logic [0:0]    cm_q__clk;
  logic [2:0]    cm_q__count;
  logic [0:0]    cm_q__reset;
  logic [31:0]   cm_q__recv__msg;
  logic [0:0]    cm_q__recv__rdy;
  logic [0:0]    cm_q__recv__val;
  logic [31:0]   cm_q__send__msg;
  logic [0:0]    cm_q__send__rdy;
  logic [0:0]    cm_q__send__val;

  NormalQueueRTL__EntryType_Bits32__num_entries_5 cm_q
  (
    .clk            (         cm_q__clk         ),
    .count          (        cm_q__count        ),
    .reset          (        cm_q__reset        ),
    .recv__msg      (      cm_q__recv__msg      ),
    .recv__rdy      (      cm_q__recv__rdy      ),
    .recv__val      (      cm_q__recv__val      ),
    .send__msg      (      cm_q__send__msg      ),
    .send__rdy      (      cm_q__send__rdy      ),
    .send__val      (      cm_q__send__val      )
  );

  logic [0:0]    mc_q__clk;
  logic [2:0]    mc_q__count;
  logic [0:0]    mc_q__reset;
  logic [31:0]   mc_q__recv__msg;
  logic [0:0]    mc_q__recv__rdy;
  logic [0:0]    mc_q__recv__val;
  logic [31:0]   mc_q__send__msg;
  logic [0:0]    mc_q__send__rdy;
  logic [0:0]    mc_q__send__val;

  NormalQueueRTL__EntryType_Bits32__num_entries_5 mc_q
  (
    .clk            (         mc_q__clk         ),
    .count          (        mc_q__count        ),
    .reset          (        mc_q__reset        ),
    .recv__msg      (      mc_q__recv__msg      ),
    .recv__rdy      (      mc_q__recv__rdy      ),
    .recv__val      (      mc_q__recv__val      ),
    .send__msg      (      mc_q__send__msg      ),
    .send__rdy      (      mc_q__send__rdy      ),
    .send__val      (      mc_q__send__val      )
  );

  // PyMTL Lambda Block Source
  // At /home/acm289/project-group99/sim/SPI_v3/components/SPIMinionAdapterPRTL.py:62
  // s.parity //= lambda: reduce_xor(s.send.msg) & s.send.val
  
  always_comb begin : _lambda__s_spi_min_stack_minion_adapter_parity
    parity = ( ^ send__msg ) & send__val;
  end

  // PyMTL Update Block Source
  // At /home/acm289/project-group99/sim/SPI_v3/components/SPIMinionAdapterPRTL.py:64
  // @update
  // def comb_block():
  //   s.open_entries @= s.mc_q.count < (num_entries-1)
  //   s.mc_recv_val @= s.push.msg.val_wrt & s.push.en
  //   s.pull.msg.spc @= s.mc_q.recv.rdy & (~s.mc_q.recv.val | s.open_entries) # there is space if the queue outputs recv.rdy and if this cycle there is no valid input to queue or there are more than 1 open entries
  // 
  //   s.cm_send_rdy @= s.push.msg.val_rd & s.pull.en
  //   s.pull.msg.val @= s.cm_send_rdy & s.cm_q.send.val
  //   s.pull.msg.data @= s.cm_q.send.msg & (sext(s.pull.msg.val, s.nbits_minus2))
  
  always_comb begin : comb_block
    open_entries = mc_q__count < ( 3'd5 - 3'd1 );
    mc_recv_val = push__msg__val_wrt & push__en;
    pull__msg__spc = mc_q__recv__rdy & ( ( ~mc_q__recv__val ) | open_entries );
    cm_send_rdy = push__msg__val_rd & pull__en;
    pull__msg__val = cm_send_rdy & cm_q__send__val;
    pull__msg__data = cm_q__send__msg & { { 31 { pull__msg__val[0] } }, pull__msg__val };
  end

  // Connections
  assign pull__msg__val = pull__msg[33:33];
  assign pull__msg__spc = pull__msg[32:32];
  assign pull__msg__data = pull__msg[31:0];
  assign push__msg[33:33] = push__msg__val_wrt;
  assign push__msg[32:32] = push__msg__val_rd;
  assign push__msg[31:0] = push__msg__data;
  assign mc_q__clk = clk;
  assign mc_q__reset = reset;
  assign send__val = mc_q__send__val;
  assign send__msg = mc_q__send__msg;
  assign mc_q__send__rdy = send__rdy;
  assign mc_q__recv__val = mc_recv_val;
  assign mc_q__recv__msg = push__msg__data;
  assign cm_q__clk = clk;
  assign cm_q__reset = reset;
  assign cm_q__recv__val = recv__val;
  assign recv__rdy = cm_q__recv__rdy;
  assign cm_q__recv__msg = recv__msg;
  assign cm_q__send__rdy = cm_send_rdy;

endmodule


// PyMTL Component Synchronizer Definition
// At /home/acm289/project-group99/sim/SPI_v3/components/Synchronizer.py
module Synchronizer__reset_value_1
(
  input  logic [0:0]    clk,
  input  logic [0:0]    in_,
  output logic [0:0]    negedge_,
  output logic [0:0]    out,
  output logic [0:0]    posedge_,
  input  logic [0:0]    reset
);
  // Wire declarations
  logic [2:0]    shreg;

  // PyMTL Lambda Block Source
  // At /home/acm289/project-group99/sim/SPI_v3/components/Synchronizer.py:37
  // s.negedge_ //= lambda: s.shreg[2]  & ~s.shreg[1]
  
  always_comb begin : _lambda__s_spi_min_stack_minion_minion_cs_sync_negedge_
    negedge_ = shreg[2'd2] & ( ~shreg[2'd1] );
  end

  // PyMTL Lambda Block Source
  // At /home/acm289/project-group99/sim/SPI_v3/components/Synchronizer.py:36
  // s.posedge_ //= lambda: ~s.shreg[2] & s.shreg[1]
  
  always_comb begin : _lambda__s_spi_min_stack_minion_minion_cs_sync_posedge_
    posedge_ = ( ~shreg[2'd2] ) & shreg[2'd1];
  end

  // PyMTL Update Block Source
  // At /home/acm289/project-group99/sim/SPI_v3/components/Synchronizer.py:30
  // @update_ff
  // def up_shreg():
  //   if s.reset: s.shreg <<= concat(s.reset_value,s.reset_value,s.reset_value) #for 4 state sim
  //   else: s.shreg <<= concat( s.shreg[0:2], s.in_ )
  
  always_ff @(posedge clk) begin : up_shreg
    if ( reset ) begin
      shreg <= { 1'd1, 1'd1, 1'd1 };
    end
    else
      shreg <= { shreg[2'd1:2'd0], in_ };
  end

  // Connections
  assign out = shreg[1:1];

endmodule


// PyMTL Component Synchronizer Definition
// At /home/acm289/project-group99/sim/SPI_v3/components/Synchronizer.py
module Synchronizer__reset_value_0
(
  input  logic [0:0]    clk,
  input  logic [0:0]    in_,
  output logic [0:0]    negedge_,
  output logic [0:0]    out,
  output logic [0:0]    posedge_,
  input  logic [0:0]    reset
);
  // Wire declarations
  logic [2:0]    shreg;

  // PyMTL Lambda Block Source
  // At /home/acm289/project-group99/sim/SPI_v3/components/Synchronizer.py:37
  // s.negedge_ //= lambda: s.shreg[2]  & ~s.shreg[1]
  
  always_comb begin : _lambda__s_spi_min_stack_minion_minion_mosi_sync_negedge_
    negedge_ = shreg[2'd2] & ( ~shreg[2'd1] );
  end

  // PyMTL Lambda Block Source
  // At /home/acm289/project-group99/sim/SPI_v3/components/Synchronizer.py:36
  // s.posedge_ //= lambda: ~s.shreg[2] & s.shreg[1]
  
  always_comb begin : _lambda__s_spi_min_stack_minion_minion_mosi_sync_posedge_
    posedge_ = ( ~shreg[2'd2] ) & shreg[2'd1];
  end

  // PyMTL Update Block Source
  // At /home/acm289/project-group99/sim/SPI_v3/components/Synchronizer.py:30
  // @update_ff
  // def up_shreg():
  //   if s.reset: s.shreg <<= concat(s.reset_value,s.reset_value,s.reset_value) #for 4 state sim
  //   else: s.shreg <<= concat( s.shreg[0:2], s.in_ )
  
  always_ff @(posedge clk) begin : up_shreg
    if ( reset ) begin
      shreg <= { 1'd0, 1'd0, 1'd0 };
    end
    else
      shreg <= { shreg[2'd1:2'd0], in_ };
  end

  // Connections
  assign out = shreg[1:1];

endmodule


// PyMTL Component ShiftReg Definition
// At /home/acm289/project-group99/sim/SPI_v3/components/ShiftReg.py
module ShiftReg__nbits_34
(
  input  logic [0:0]    clk,
  input  logic [0:0]    in_,
  input  logic [33:0]   load_data,
  input  logic [0:0]    load_en,
  output logic [33:0]   out,
  input  logic [0:0]    reset,
  input  logic [0:0]    shift_en
);

  // PyMTL Update Block Source
  // At /home/acm289/project-group99/sim/SPI_v3/components/ShiftReg.py:27
  // @update_ff
  // def up_shreg():
  //   if s.reset: 
  //     s.out <<= zext(Bits1(0), s.nbits) # for 4 state sim
  //   elif ( s.load_en ):
  //     s.out <<= s.load_data
  //   elif ( ~s.load_en & s.shift_en ):
  //     s.out <<= concat( s.out[0:s.nbits-1], s.in_ )
  
  always_ff @(posedge clk) begin : up_shreg
    if ( reset ) begin
      out <= { { 33 { 1'b0 } }, 1'd0 };
    end
    else if ( load_en ) begin
      out <= load_data;
    end
    else if ( ( ~load_en ) & shift_en ) begin
      out <= { out[6'd32:6'd0], in_ };
    end
  end

endmodule


// PyMTL Component SPIMinionPRTL Definition
// At /home/acm289/project-group99/sim/SPI_v3/components/SPIMinionPRTL.py
module SPIMinionPRTL__nbits_34
(
  input  logic [0:0]    clk,
  output logic [0:0]    parity,
  input  logic [0:0]    reset,
  output logic [0:0]    pull__en,
  input  logic [33:0]   pull__msg,
  output logic [0:0]    push__en,
  output logic [33:0]   push__msg,
  input  logic [0:0]    spi_min__cs,
  output logic [0:0]    spi_min__miso,
  input  logic [0:0]    spi_min__mosi,
  input  logic [0:0]    spi_min__sclk
);
  // Sub-component declarations
  logic [0:0]    cs_sync__clk;
  logic [0:0]    cs_sync__in_;
  logic [0:0]    cs_sync__negedge_;
  logic [0:0]    cs_sync__out;
  logic [0:0]    cs_sync__posedge_;
  logic [0:0]    cs_sync__reset;

  Synchronizer__reset_value_1 cs_sync
  (
    .clk            (        cs_sync__clk       ),
    .in_            (        cs_sync__in_       ),
    .negedge_       (     cs_sync__negedge_     ),
    .out            (        cs_sync__out       ),
    .posedge_       (     cs_sync__posedge_     ),
    .reset          (       cs_sync__reset      )
  );

  logic [0:0]    mosi_sync__clk;
  logic [0:0]    mosi_sync__in_;
  logic [0:0]    mosi_sync__negedge_;
  logic [0:0]    mosi_sync__out;
  logic [0:0]    mosi_sync__posedge_;
  logic [0:0]    mosi_sync__reset;

  Synchronizer__reset_value_0 mosi_sync
  (
    .clk            (       mosi_sync__clk      ),
    .in_            (       mosi_sync__in_      ),
    .negedge_       (    mosi_sync__negedge_    ),
    .out            (       mosi_sync__out      ),
    .posedge_       (    mosi_sync__posedge_    ),
    .reset          (      mosi_sync__reset     )
  );

  logic [0:0]    sclk_sync__clk;
  logic [0:0]    sclk_sync__in_;
  logic [0:0]    sclk_sync__negedge_;
  logic [0:0]    sclk_sync__out;
  logic [0:0]    sclk_sync__posedge_;
  logic [0:0]    sclk_sync__reset;

  Synchronizer__reset_value_0 sclk_sync
  (
    .clk            (       sclk_sync__clk      ),
    .in_            (       sclk_sync__in_      ),
    .negedge_       (    sclk_sync__negedge_    ),
    .out            (       sclk_sync__out      ),
    .posedge_       (    sclk_sync__posedge_    ),
    .reset          (      sclk_sync__reset     )
  );

  logic [0:0]    shreg_in__clk;
  logic [0:0]    shreg_in__in_;
  logic [33:0]   shreg_in__load_data;
  logic [0:0]    shreg_in__load_en;
  logic [33:0]   shreg_in__out;
  logic [0:0]    shreg_in__reset;
  logic [0:0]    shreg_in__shift_en;

  ShiftReg__nbits_34 shreg_in
  (
    .clk            (       shreg_in__clk       ),
    .in_            (       shreg_in__in_       ),
    .load_data      (    shreg_in__load_data    ),
    .load_en        (     shreg_in__load_en     ),
    .out            (       shreg_in__out       ),
    .reset          (      shreg_in__reset      ),
    .shift_en       (     shreg_in__shift_en    )
  );

  logic [0:0]    shreg_out__clk;
  logic [0:0]    shreg_out__in_;
  logic [33:0]   shreg_out__load_data;
  logic [0:0]    shreg_out__load_en;
  logic [33:0]   shreg_out__out;
  logic [0:0]    shreg_out__reset;
  logic [0:0]    shreg_out__shift_en;

  ShiftReg__nbits_34 shreg_out
  (
    .clk            (       shreg_out__clk      ),
    .in_            (       shreg_out__in_      ),
    .load_data      (    shreg_out__load_data   ),
    .load_en        (     shreg_out__load_en    ),
    .out            (       shreg_out__out      ),
    .reset          (      shreg_out__reset     ),
    .shift_en       (    shreg_out__shift_en    )
  );

  // PyMTL Lambda Block Source
  // At /home/acm289/project-group99/sim/SPI_v3/components/SPIMinionPRTL.py:62
  // s.parity //= lambda: reduce_xor(s.push.msg[0:s.nbits-2]) & s.push.en
  
  always_comb begin : _lambda__s_spi_min_stack_minion_minion_parity
    parity = ( ^ push__msg[6'd31:6'd0] ) & push__en;
  end

  // PyMTL Lambda Block Source
  // At /home/acm289/project-group99/sim/SPI_v3/components/SPIMinionPRTL.py:45
  // m.shift_en  //= lambda: ~s.cs_sync.out & s.sclk_sync.posedge_
  
  always_comb begin : _lambda__s_spi_min_stack_minion_minion_shreg_in_shift_en
    shreg_in__shift_en = ( ~cs_sync__out ) & sclk_sync__posedge_;
  end

  // PyMTL Lambda Block Source
  // At /home/acm289/project-group99/sim/SPI_v3/components/SPIMinionPRTL.py:51
  // m.shift_en  //= lambda: ~s.cs_sync.out & s.sclk_sync.negedge_
  
  always_comb begin : _lambda__s_spi_min_stack_minion_minion_shreg_out_shift_en
    shreg_out__shift_en = ( ~cs_sync__out ) & sclk_sync__negedge_;
  end

  // Connections
  assign cs_sync__clk = clk;
  assign cs_sync__reset = reset;
  assign cs_sync__in_ = spi_min__cs;
  assign sclk_sync__clk = clk;
  assign sclk_sync__reset = reset;
  assign sclk_sync__in_ = spi_min__sclk;
  assign mosi_sync__clk = clk;
  assign mosi_sync__reset = reset;
  assign mosi_sync__in_ = spi_min__mosi;
  assign shreg_in__clk = clk;
  assign shreg_in__reset = reset;
  assign shreg_in__in_ = mosi_sync__out;
  assign shreg_in__load_en = 1'd0;
  assign shreg_in__load_data = 34'd0;
  assign shreg_out__clk = clk;
  assign shreg_out__reset = reset;
  assign shreg_out__in_ = 1'd0;
  assign shreg_out__load_en = pull__en;
  assign shreg_out__load_data = pull__msg;
  assign spi_min__miso = shreg_out__out[33:33];
  assign pull__en = cs_sync__negedge_;
  assign push__en = cs_sync__posedge_;
  assign push__msg = shreg_in__out;

endmodule


// PyMTL Component SPIMinionAdapterCompositePRTL Definition
// At /home/acm289/project-group99/sim/SPI_v3/components/SPIMinionAdapterCompositePRTL.py
module SPIMinionAdapterCompositePRTL__nbits_34__num_entries_5
(
  output logic [0:0]    adapter_parity,
  input  logic [0:0]    clk,
  output logic [0:0]    minion_parity,
  input  logic [0:0]    reset,
  input  logic [31:0]   recv__msg,
  output logic [0:0]    recv__rdy,
  input  logic [0:0]    recv__val,
  output logic [31:0]   send__msg,
  input  logic [0:0]    send__rdy,
  output logic [0:0]    send__val,
  input  logic [0:0]    spi_min__cs,
  output logic [0:0]    spi_min__miso,
  input  logic [0:0]    spi_min__mosi,
  input  logic [0:0]    spi_min__sclk
);
  // Struct/Array ports of sub-components in the form of wires
  logic [33:0]   adapter__pull__msg;
  logic [33:0]   adapter__push__msg;

  // Sub-component declarations
  logic [0:0]    adapter__clk;
  logic [0:0]    adapter__parity;
  logic [0:0]    adapter__reset;
  logic [0:0]    adapter__pull__en;
  logic [0:0]    adapter__pull__msg__val;
  logic [0:0]    adapter__pull__msg__spc;
  logic [31:0]   adapter__pull__msg__data;
  logic [0:0]    adapter__push__en;
  logic [0:0]    adapter__push__msg__val_wrt;
  logic [0:0]    adapter__push__msg__val_rd;
  logic [31:0]   adapter__push__msg__data;
  logic [31:0]   adapter__recv__msg;
  logic [0:0]    adapter__recv__rdy;
  logic [0:0]    adapter__recv__val;
  logic [31:0]   adapter__send__msg;
  logic [0:0]    adapter__send__rdy;
  logic [0:0]    adapter__send__val;

  SPIMinionAdapterPRTL__nbits_34__num_entries_5 adapter
  (
    .clk            (        adapter__clk       ),
    .parity         (      adapter__parity      ),
    .reset          (       adapter__reset      ),
    .pull__en       (     adapter__pull__en     ),
    .pull__msg__val (  adapter__pull__msg__val  ),
    .pull__msg__spc (  adapter__pull__msg__spc  ),
    .pull__msg__data(  adapter__pull__msg__data ),
    .push__en       (     adapter__push__en     ),
    .push__msg__val_wrt( adapter__push__msg__val_wrt ),
    .push__msg__val_rd( adapter__push__msg__val_rd ),
    .push__msg__data(  adapter__push__msg__data ),
    .recv__msg      (     adapter__recv__msg    ),
    .recv__rdy      (     adapter__recv__rdy    ),
    .recv__val      (     adapter__recv__val    ),
    .send__msg      (     adapter__send__msg    ),
    .send__rdy      (     adapter__send__rdy    ),
    .send__val      (     adapter__send__val    )
  );

  logic [0:0]    minion__clk;
  logic [0:0]    minion__parity;
  logic [0:0]    minion__reset;
  logic [0:0]    minion__pull__en;
  logic [33:0]   minion__pull__msg;
  logic [0:0]    minion__push__en;
  logic [33:0]   minion__push__msg;
  logic [0:0]    minion__spi_min__cs;
  logic [0:0]    minion__spi_min__miso;
  logic [0:0]    minion__spi_min__mosi;
  logic [0:0]    minion__spi_min__sclk;

  SPIMinionPRTL__nbits_34 minion
  (
    .clk            (        minion__clk        ),
    .parity         (       minion__parity      ),
    .reset          (       minion__reset       ),
    .pull__en       (      minion__pull__en     ),
    .pull__msg      (     minion__pull__msg     ),
    .push__en       (      minion__push__en     ),
    .push__msg      (     minion__push__msg     ),
    .spi_min__cs    (    minion__spi_min__cs    ),
    .spi_min__miso  (   minion__spi_min__miso   ),
    .spi_min__mosi  (   minion__spi_min__mosi   ),
    .spi_min__sclk  (   minion__spi_min__sclk   )
  );

  // Connect struct/array ports and their wire forms
  assign adapter__pull__msg[33:33] = adapter__pull__msg__val;
  assign adapter__pull__msg[32:32] = adapter__pull__msg__spc;
  assign adapter__pull__msg[31:0] = adapter__pull__msg__data;
  assign adapter__push__msg__val_wrt = adapter__push__msg[33:33];
  assign adapter__push__msg__val_rd = adapter__push__msg[32:32];
  assign adapter__push__msg__data = adapter__push__msg[31:0];

  // Connections
  assign minion__clk = clk;
  assign minion__reset = reset;
  assign minion__spi_min__cs = spi_min__cs;
  assign spi_min__miso = minion__spi_min__miso;
  assign minion__spi_min__mosi = spi_min__mosi;
  assign minion__spi_min__sclk = spi_min__sclk;
  assign minion_parity = minion__parity;
  assign adapter__clk = clk;
  assign adapter__reset = reset;
  assign adapter__pull__en = minion__pull__en;
  assign minion__pull__msg[33:33] = adapter__pull__msg__val;
  assign minion__pull__msg[32:32] = adapter__pull__msg__spc;
  assign minion__pull__msg[31:0] = adapter__pull__msg__data;
  assign adapter__push__en = minion__push__en;
  assign adapter__push__msg__val_wrt = minion__push__msg[33:33];
  assign adapter__push__msg__val_rd = minion__push__msg[32:32];
  assign adapter__push__msg__data = minion__push__msg[31:0];
  assign adapter_parity = adapter__parity;
  assign send__msg = adapter__send__msg;
  assign adapter__send__rdy = send__rdy;
  assign send__val = adapter__send__val;
  assign adapter__recv__msg = recv__msg;
  assign recv__rdy = adapter__recv__rdy;
  assign adapter__recv__val = recv__val;

endmodule


// PyMTL Component SPIstackPRTL Definition
// At /home/acm289/project-group99/sim/SPI_v3/components/SPIstackPRTL.py
module SPIstackPRTL__nbits_34__num_entries_5
(
  output logic [0:0]    adapter_parity,
  input  logic [0:0]    clk,
  input  logic [0:0]    loopthrough_sel,
  output logic [0:0]    minion_parity,
  input  logic [0:0]    reset,
  input  logic [31:0]   recv__msg,
  output logic [0:0]    recv__rdy,
  input  logic [0:0]    recv__val,
  output logic [31:0]   send__msg,
  input  logic [0:0]    send__rdy,
  output logic [0:0]    send__val,
  input  logic [0:0]    spi_min__cs,
  output logic [0:0]    spi_min__miso,
  input  logic [0:0]    spi_min__mosi,
  input  logic [0:0]    spi_min__sclk
);
  // Sub-component declarations
  logic [0:0]    loopthrough__clk;
  logic [0:0]    loopthrough__reset;
  logic [0:0]    loopthrough__sel;
  logic [31:0]   loopthrough__downstream__req__msg;
  logic [0:0]    loopthrough__downstream__req__rdy;
  logic [0:0]    loopthrough__downstream__req__val;
  logic [31:0]   loopthrough__downstream__resp__msg;
  logic [0:0]    loopthrough__downstream__resp__rdy;
  logic [0:0]    loopthrough__downstream__resp__val;
  logic [31:0]   loopthrough__upstream__req__msg;
  logic [0:0]    loopthrough__upstream__req__rdy;
  logic [0:0]    loopthrough__upstream__req__val;
  logic [31:0]   loopthrough__upstream__resp__msg;
  logic [0:0]    loopthrough__upstream__resp__rdy;
  logic [0:0]    loopthrough__upstream__resp__val;

  LoopThroughPRTL__nbits_32 loopthrough
  (
    .clk            (      loopthrough__clk     ),
    .reset          (     loopthrough__reset    ),
    .sel            (      loopthrough__sel     ),
    .downstream__req__msg( loopthrough__downstream__req__msg ),
    .downstream__req__rdy( loopthrough__downstream__req__rdy ),
    .downstream__req__val( loopthrough__downstream__req__val ),
    .downstream__resp__msg( loopthrough__downstream__resp__msg ),
    .downstream__resp__rdy( loopthrough__downstream__resp__rdy ),
    .downstream__resp__val( loopthrough__downstream__resp__val ),
    .upstream__req__msg( loopthrough__upstream__req__msg ),
    .upstream__req__rdy( loopthrough__upstream__req__rdy ),
    .upstream__req__val( loopthrough__upstream__req__val ),
    .upstream__resp__msg( loopthrough__upstream__resp__msg ),
    .upstream__resp__rdy( loopthrough__upstream__resp__rdy ),
    .upstream__resp__val( loopthrough__upstream__resp__val )
  );

  logic [0:0]    minion__adapter_parity;
  logic [0:0]    minion__clk;
  logic [0:0]    minion__minion_parity;
  logic [0:0]    minion__reset;
  logic [31:0]   minion__recv__msg;
  logic [0:0]    minion__recv__rdy;
  logic [0:0]    minion__recv__val;
  logic [31:0]   minion__send__msg;
  logic [0:0]    minion__send__rdy;
  logic [0:0]    minion__send__val;
  logic [0:0]    minion__spi_min__cs;
  logic [0:0]    minion__spi_min__miso;
  logic [0:0]    minion__spi_min__mosi;
  logic [0:0]    minion__spi_min__sclk;

  SPIMinionAdapterCompositePRTL__nbits_34__num_entries_5 minion
  (
    .adapter_parity (   minion__adapter_parity  ),
    .clk            (        minion__clk        ),
    .minion_parity  (   minion__minion_parity   ),
    .reset          (       minion__reset       ),
    .recv__msg      (     minion__recv__msg     ),
    .recv__rdy      (     minion__recv__rdy     ),
    .recv__val      (     minion__recv__val     ),
    .send__msg      (     minion__send__msg     ),
    .send__rdy      (     minion__send__rdy     ),
    .send__val      (     minion__send__val     ),
    .spi_min__cs    (    minion__spi_min__cs    ),
    .spi_min__miso  (   minion__spi_min__miso   ),
    .spi_min__mosi  (   minion__spi_min__mosi   ),
    .spi_min__sclk  (   minion__spi_min__sclk   )
  );

  // Connections
  assign minion__clk = clk;
  assign minion__reset = reset;
  assign minion__spi_min__cs = spi_min__cs;
  assign spi_min__miso = minion__spi_min__miso;
  assign minion__spi_min__mosi = spi_min__mosi;
  assign minion__spi_min__sclk = spi_min__sclk;
  assign minion_parity = minion__minion_parity;
  assign adapter_parity = minion__adapter_parity;
  assign loopthrough__clk = clk;
  assign loopthrough__reset = reset;
  assign loopthrough__sel = loopthrough_sel;
  assign loopthrough__upstream__req__msg = minion__send__msg;
  assign minion__send__rdy = loopthrough__upstream__req__rdy;
  assign loopthrough__upstream__req__val = minion__send__val;
  assign minion__recv__msg = loopthrough__upstream__resp__msg;
  assign loopthrough__upstream__resp__rdy = minion__recv__rdy;
  assign minion__recv__val = loopthrough__upstream__resp__val;
  assign send__msg = loopthrough__downstream__req__msg;
  assign loopthrough__downstream__req__rdy = send__rdy;
  assign send__val = loopthrough__downstream__req__val;
  assign loopthrough__downstream__resp__msg = recv__msg;
  assign recv__rdy = loopthrough__downstream__resp__rdy;
  assign loopthrough__downstream__resp__val = recv__val;

endmodule


// PyMTL Component SPI_TapeOutBlockPRTL Definition
// Full name: SPI_TapeOutBlockPRTL__nbits_32__num_entries_5
// At /home/acm289/project-group99/sim/tapeout/SPI_TapeOutBlockPRTL.py
module grp_99_SPI_TapeOutBlockRTL_32bits_5entries
(
  `ifdef USE_POWER_PINS
    inout vccd1, // User area 1 1.8V supply
    inout vssd1, // User area 1 digital ground
  `endif
  output logic [0:0]    adapter_parity,
  input  logic [0:0]    clk,
  input  logic [0:0]    loopthrough_sel,
  output logic [0:0]    minion_parity,
  input  logic [0:0]    reset,
  input  logic [0:0]    spi_min__cs,
  output logic [0:0]    spi_min__miso,
  input  logic [0:0]    spi_min__mosi,
  input  logic [0:0]    spi_min__sclk,
  output logic [0:0]    clk_en,
  output logic [0:0]    reset_en,
  output logic [0:0]    lt_sel_en,
  output logic [0:0]    mp_en,
  output logic [0:0]    ap_en,
  output logic [0:0]    cs_en,
  output logic [0:0]    sclk_en,
  output logic [0:0]    miso_en,
  output logic [0:0]    mosi_en
);

  assign lt_sel_en = 1; //Input
  assign mp_en = 0; //Output
  assign ap_en = 0; //Output
  assign cs_en = 1; //Input
  assign sclk_en = 1; //Input
  assign miso_en = 0; //Output
  assign mosi_en = 1; //Input
  assign clk_en = 1; //Input
  assign reset_en = 1; //Input
  

  // Sub-component declarations
  logic [0:0]    block__clk;
  logic [0:0]    block__reset;
  logic [31:0]   block__recv__msg;
  logic [0:0]    block__recv__rdy;
  logic [0:0]    block__recv__val;
  logic [31:0]   block__send__msg;
  logic [0:0]    block__send__rdy;
  logic [0:0]    block__send__val;

  BlockPlaceholderPRTL__nbits_32 block
  (
    .clk            (         block__clk        ),
    .reset          (        block__reset       ),
    .recv__msg      (      block__recv__msg     ),
    .recv__rdy      (      block__recv__rdy     ),
    .recv__val      (      block__recv__val     ),
    .send__msg      (      block__send__msg     ),
    .send__rdy      (      block__send__rdy     ),
    .send__val      (      block__send__val     )
  );

  logic [0:0]    spi_min_stack__adapter_parity;
  logic [0:0]    spi_min_stack__clk;
  logic [0:0]    spi_min_stack__loopthrough_sel;
  logic [0:0]    spi_min_stack__minion_parity;
  logic [0:0]    spi_min_stack__reset;
  logic [31:0]   spi_min_stack__recv__msg;
  logic [0:0]    spi_min_stack__recv__rdy;
  logic [0:0]    spi_min_stack__recv__val;
  logic [31:0]   spi_min_stack__send__msg;
  logic [0:0]    spi_min_stack__send__rdy;
  logic [0:0]    spi_min_stack__send__val;
  logic [0:0]    spi_min_stack__spi_min__cs;
  logic [0:0]    spi_min_stack__spi_min__miso;
  logic [0:0]    spi_min_stack__spi_min__mosi;
  logic [0:0]    spi_min_stack__spi_min__sclk;

  SPIstackPRTL__nbits_34__num_entries_5 spi_min_stack
  (
    .adapter_parity ( spi_min_stack__adapter_parity ),
    .clk            (     spi_min_stack__clk    ),
    .loopthrough_sel( spi_min_stack__loopthrough_sel ),
    .minion_parity  ( spi_min_stack__minion_parity ),
    .reset          (    spi_min_stack__reset   ),
    .recv__msg      (  spi_min_stack__recv__msg ),
    .recv__rdy      (  spi_min_stack__recv__rdy ),
    .recv__val      (  spi_min_stack__recv__val ),
    .send__msg      (  spi_min_stack__send__msg ),
    .send__rdy      (  spi_min_stack__send__rdy ),
    .send__val      (  spi_min_stack__send__val ),
    .spi_min__cs    ( spi_min_stack__spi_min__cs ),
    .spi_min__miso  ( spi_min_stack__spi_min__miso ),
    .spi_min__mosi  ( spi_min_stack__spi_min__mosi ),
    .spi_min__sclk  ( spi_min_stack__spi_min__sclk )
  );

  // PyMTL Update Block Source
  // At /home/acm289/project-group99/sim/tapeout/SPI_TapeOutBlockPRTL.py:76
  // @update
  // def combinational():
  //   s.block.recv.msg         @= s.spi_min_stack.send.msg
  //   s.block.recv.val         @= s.spi_min_stack.send.val
  //   s.spi_min_stack.send.rdy @= s.block.recv.rdy
  //   s.spi_min_stack.recv.msg @= sext(s.block.send.msg,32)
  //   s.spi_min_stack.recv.val @= s.block.send.val
  //   s.block.send.rdy         @= s.spi_min_stack.recv.rdy
  
  always_comb begin : combinational
    block__recv__msg = spi_min_stack__send__msg;
    block__recv__val = spi_min_stack__send__val;
    spi_min_stack__send__rdy = block__recv__rdy;
    spi_min_stack__recv__msg = block__send__msg;
    spi_min_stack__recv__val = block__send__val;
    block__send__rdy = spi_min_stack__recv__rdy;
  end

  // Connections
  assign spi_min_stack__clk = clk;
  assign spi_min_stack__reset = reset;
  assign spi_min_stack__spi_min__cs = spi_min__cs;
  assign spi_min_stack__spi_min__sclk = spi_min__sclk;
  assign spi_min_stack__spi_min__mosi = spi_min__mosi;
  assign spi_min__miso = spi_min_stack__spi_min__miso;
  assign spi_min_stack__loopthrough_sel = loopthrough_sel;
  assign minion_parity = spi_min_stack__minion_parity;
  assign adapter_parity = spi_min_stack__adapter_parity;
  assign block__clk = clk;
  assign block__reset = reset;

endmodule
