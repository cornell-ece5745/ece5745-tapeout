//-------------------------------------------------------------------------
// grp_99_SPI_TapeOutBlockRTL_32bits_5entries.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL VerilogPlaceholder SPI_TapeOutBlockVRTL_sv2v Definition
// Full name: SPI_TapeOutBlockVRTL_sv2v_noparam
// At /home/acm289/project-group99/sim/tapeout/SPI_TapeOutBlockRTL.py

//***********************************************************
// Pickled source file of placeholder SPI_TapeOutBlockVRTL_sv2v_noparam
//***********************************************************

//-----------------------------------------------------------
// Dependency of placeholder SPI_TapeOutBlockVRTL_sv2v
//-----------------------------------------------------------

`ifndef SPI_TAPEOUTBLOCKVRTL_SV2V
`define SPI_TAPEOUTBLOCKVRTL_SV2V

// The source code below are included because they are specified
// as the v_libs Verilog placeholder option of component SPI_TapeOutBlockVRTL_sv2v_noparam.

// If you get a duplicated def error from files included below, please
// make sure they are included either through the v_libs option or the
// explicit `include statement in the Verilog source code -- if they
// appear in both then they will be included twice!


// End of all v_libs files for component SPI_TapeOutBlockVRTL_sv2v_noparam

`line 1 "tapeout/SPI_TapeOutBlockVRTL_sv2v.v" 0
module GcdUnitCtrlRTL_noparam (
	a_mux_sel,
	a_reg_en,
	b_mux_sel,
	b_reg_en,
	clk,
	is_a_lt_b,
	is_b_zero,
	req_rdy,
	req_val,
	reset,
	resp_rdy,
	resp_val
);
	output reg [1:0] a_mux_sel;
	output reg [0:0] a_reg_en;
	output reg [0:0] b_mux_sel;
	output reg [0:0] b_reg_en;
	input wire [0:0] clk;
	input wire [0:0] is_a_lt_b;
	input wire [0:0] is_b_zero;
	output reg [0:0] req_rdy;
	input wire [0:0] req_val;
	input wire [0:0] reset;
	input wire [0:0] resp_rdy;
	output reg [0:0] resp_val;
	localparam [0:0] __const__A_MUX_SEL_IN = 1'd0;
	localparam [0:0] __const__B_MUX_SEL_IN = 1'd1;
	localparam [1:0] __const__A_MUX_SEL_B = 2'd2;
	localparam [0:0] __const__A_MUX_SEL_SUB = 1'd1;
	localparam [0:0] __const__B_MUX_SEL_A = 1'd0;
	localparam [0:0] __const__A_MUX_SEL_X = 1'd0;
	localparam [0:0] __const__B_MUX_SEL_X = 1'd0;
	reg [0:0] do_sub;
	reg [0:0] do_swap;
	reg [1:0] state;
	function automatic [1:0] sv2v_cast_2;
		input reg [1:0] inp;
		sv2v_cast_2 = inp;
	endfunction
	always @(*) begin : state_outputs
		do_swap = 1'd0;
		do_sub = 1'd0;
		req_rdy = 1'd0;
		resp_val = 1'd0;
		a_mux_sel = 2'd0;
		a_reg_en = 1'd0;
		b_mux_sel = 1'd0;
		b_reg_en = 1'd0;
		if (state == 2'd0) begin
			req_rdy = 1'd1;
			resp_val = 1'd0;
			a_mux_sel = sv2v_cast_2(__const__A_MUX_SEL_IN);
			a_reg_en = 1'd1;
			b_mux_sel = __const__B_MUX_SEL_IN;
			b_reg_en = 1'd1;
		end
		else if (state == 2'd1) begin
			do_swap = is_a_lt_b;
			do_sub = ~is_b_zero;
			req_rdy = 1'd0;
			resp_val = 1'd0;
			a_mux_sel = (do_swap ? __const__A_MUX_SEL_B : __const__A_MUX_SEL_SUB);
			a_reg_en = 1'd1;
			b_mux_sel = __const__B_MUX_SEL_A;
			b_reg_en = do_swap;
		end
		else if (state == 2'd2) begin
			req_rdy = 1'd0;
			resp_val = 1'd1;
			a_mux_sel = sv2v_cast_2(__const__A_MUX_SEL_X);
			a_reg_en = 1'd0;
			b_mux_sel = __const__B_MUX_SEL_X;
			b_reg_en = 1'd0;
		end
	end
	always @(posedge clk) begin : state_transitions
		if (reset)
			state <= 2'd0;
		if (state == 2'd0)
			if (req_val)
				state <= 2'd1;
		if (state == 2'd1)
			if (~is_a_lt_b & is_b_zero)
				state <= 2'd2;
		if (state == 2'd2)
			if (resp_rdy)
				state <= 2'd0;
	end
endmodule
module LTComparator__Type_Bits16 (
	clk,
	in0,
	in1,
	out,
	reset
);
	input wire [0:0] clk;
	input wire [15:0] in0;
	input wire [15:0] in1;
	output reg [0:0] out;
	input wire [0:0] reset;
	always @(*) begin : up_ltcomp
		out = in0 < in1;
	end
endmodule
module Mux__Type_Bits16__ninputs_3 (
	clk,
	in_,
	out,
	reset,
	sel
);
	input wire [0:0] clk;
	input wire [47:0] in_;
	output reg [15:0] out;
	input wire [0:0] reset;
	input wire [1:0] sel;
	always @(*) begin : up_mux
		out = in_[(2 - sel) * 16+:16];
	end
endmodule
module RegEn__Type_Bits16 (
	clk,
	en,
	in_,
	out,
	reset
);
	input wire [0:0] clk;
	input wire [0:0] en;
	input wire [15:0] in_;
	output reg [15:0] out;
	input wire [0:0] reset;
	always @(posedge clk) begin : up_regen
		if (en)
			out <= in_;
	end
endmodule
module Mux__Type_Bits16__ninputs_2 (
	clk,
	in_,
	out,
	reset,
	sel
);
	input wire [0:0] clk;
	input wire [31:0] in_;
	output reg [15:0] out;
	input wire [0:0] reset;
	input wire [0:0] sel;
	always @(*) begin : up_mux
		out = in_[(1 - sel) * 16+:16];
	end
endmodule
module ZeroComparator__Type_Bits16 (
	clk,
	in_,
	out,
	reset
);
	input wire [0:0] clk;
	input wire [15:0] in_;
	output reg [0:0] out;
	input wire [0:0] reset;
	always @(*) begin : up_zerocomp
		out = in_ == 16'd0;
	end
endmodule
module Subtractor__Type_Bits16 (
	clk,
	in0,
	in1,
	out,
	reset
);
	input wire [0:0] clk;
	input wire [15:0] in0;
	input wire [15:0] in1;
	output reg [15:0] out;
	input wire [0:0] reset;
	always @(*) begin : up_subtractor
		out = in0 - in1;
	end
endmodule
module GcdUnitDpathRTL_noparam (
	a_mux_sel,
	a_reg_en,
	b_mux_sel,
	b_reg_en,
	clk,
	is_a_lt_b,
	is_b_zero,
	req_msg_a,
	req_msg_b,
	reset,
	resp_msg
);
	input wire [1:0] a_mux_sel;
	input wire [0:0] a_reg_en;
	input wire [0:0] b_mux_sel;
	input wire [0:0] b_reg_en;
	input wire [0:0] clk;
	output wire [0:0] is_a_lt_b;
	output wire [0:0] is_b_zero;
	input wire [15:0] req_msg_a;
	input wire [15:0] req_msg_b;
	input wire [0:0] reset;
	output wire [15:0] resp_msg;
	wire [15:0] b_reg_out;
	wire [15:0] sub_out;
	wire [0:0] a_lt_b__clk;
	wire [15:0] a_lt_b__in0;
	wire [15:0] a_lt_b__in1;
	wire [0:0] a_lt_b__out;
	wire [0:0] a_lt_b__reset;
	LTComparator__Type_Bits16 a_lt_b(
		.clk(a_lt_b__clk),
		.in0(a_lt_b__in0),
		.in1(a_lt_b__in1),
		.out(a_lt_b__out),
		.reset(a_lt_b__reset)
	);
	wire [0:0] a_mux__clk;
	wire [47:0] a_mux__in_;
	wire [15:0] a_mux__out;
	wire [0:0] a_mux__reset;
	wire [1:0] a_mux__sel;
	Mux__Type_Bits16__ninputs_3 a_mux(
		.clk(a_mux__clk),
		.in_(a_mux__in_),
		.out(a_mux__out),
		.reset(a_mux__reset),
		.sel(a_mux__sel)
	);
	wire [0:0] a_reg__clk;
	wire [0:0] a_reg__en;
	wire [15:0] a_reg__in_;
	wire [15:0] a_reg__out;
	wire [0:0] a_reg__reset;
	RegEn__Type_Bits16 a_reg(
		.clk(a_reg__clk),
		.en(a_reg__en),
		.in_(a_reg__in_),
		.out(a_reg__out),
		.reset(a_reg__reset)
	);
	wire [0:0] b_mux__clk;
	wire [31:0] b_mux__in_;
	wire [15:0] b_mux__out;
	wire [0:0] b_mux__reset;
	wire [0:0] b_mux__sel;
	Mux__Type_Bits16__ninputs_2 b_mux(
		.clk(b_mux__clk),
		.in_(b_mux__in_),
		.out(b_mux__out),
		.reset(b_mux__reset),
		.sel(b_mux__sel)
	);
	wire [0:0] b_reg__clk;
	wire [0:0] b_reg__en;
	wire [15:0] b_reg__in_;
	wire [15:0] b_reg__out;
	wire [0:0] b_reg__reset;
	RegEn__Type_Bits16 b_reg(
		.clk(b_reg__clk),
		.en(b_reg__en),
		.in_(b_reg__in_),
		.out(b_reg__out),
		.reset(b_reg__reset)
	);
	wire [0:0] b_zero__clk;
	wire [15:0] b_zero__in_;
	wire [0:0] b_zero__out;
	wire [0:0] b_zero__reset;
	ZeroComparator__Type_Bits16 b_zero(
		.clk(b_zero__clk),
		.in_(b_zero__in_),
		.out(b_zero__out),
		.reset(b_zero__reset)
	);
	wire [0:0] sub__clk;
	wire [15:0] sub__in0;
	wire [15:0] sub__in1;
	wire [15:0] sub__out;
	wire [0:0] sub__reset;
	Subtractor__Type_Bits16 sub(
		.clk(sub__clk),
		.in0(sub__in0),
		.in1(sub__in1),
		.out(sub__out),
		.reset(sub__reset)
	);
	assign a_mux__clk = clk;
	assign a_mux__reset = reset;
	assign a_mux__sel = a_mux_sel;
	assign a_mux__in_[32+:16] = req_msg_a;
	assign a_mux__in_[16+:16] = sub_out;
	assign a_mux__in_[0+:16] = b_reg_out;
	assign a_reg__clk = clk;
	assign a_reg__reset = reset;
	assign a_reg__en = a_reg_en;
	assign a_reg__in_ = a_mux__out;
	assign b_mux__clk = clk;
	assign b_mux__reset = reset;
	assign b_mux__sel = b_mux_sel;
	assign b_mux__in_[16+:16] = a_reg__out;
	assign b_mux__in_[0+:16] = req_msg_b;
	assign b_reg__clk = clk;
	assign b_reg__reset = reset;
	assign b_reg__en = b_reg_en;
	assign b_reg__in_ = b_mux__out;
	assign b_reg_out = b_reg__out;
	assign b_zero__clk = clk;
	assign b_zero__reset = reset;
	assign b_zero__in_ = b_reg__out;
	assign is_b_zero = b_zero__out;
	assign a_lt_b__clk = clk;
	assign a_lt_b__reset = reset;
	assign a_lt_b__in0 = a_reg__out;
	assign a_lt_b__in1 = b_reg__out;
	assign is_a_lt_b = a_lt_b__out;
	assign sub__clk = clk;
	assign sub__reset = reset;
	assign sub__in0 = a_reg__out;
	assign sub__in1 = b_reg__out;
	assign sub_out = sub__out;
	assign resp_msg = sub__out;
endmodule
module GcdUnitRTL_noparam (
	clk,
	reset,
	recv__msg,
	recv__rdy,
	recv__val,
	send__msg,
	send__rdy,
	send__val
);
	input wire [0:0] clk;
	input wire [0:0] reset;
	input wire [31:0] recv__msg;
	output wire [0:0] recv__rdy;
	input wire [0:0] recv__val;
	output wire [15:0] send__msg;
	input wire [0:0] send__rdy;
	output wire [0:0] send__val;
	wire [1:0] ctrl__a_mux_sel;
	wire [0:0] ctrl__a_reg_en;
	wire [0:0] ctrl__b_mux_sel;
	wire [0:0] ctrl__b_reg_en;
	wire [0:0] ctrl__clk;
	wire [0:0] ctrl__is_a_lt_b;
	wire [0:0] ctrl__is_b_zero;
	wire [0:0] ctrl__req_rdy;
	wire [0:0] ctrl__req_val;
	wire [0:0] ctrl__reset;
	wire [0:0] ctrl__resp_rdy;
	wire [0:0] ctrl__resp_val;
	GcdUnitCtrlRTL_noparam ctrl(
		.a_mux_sel(ctrl__a_mux_sel),
		.a_reg_en(ctrl__a_reg_en),
		.b_mux_sel(ctrl__b_mux_sel),
		.b_reg_en(ctrl__b_reg_en),
		.clk(ctrl__clk),
		.is_a_lt_b(ctrl__is_a_lt_b),
		.is_b_zero(ctrl__is_b_zero),
		.req_rdy(ctrl__req_rdy),
		.req_val(ctrl__req_val),
		.reset(ctrl__reset),
		.resp_rdy(ctrl__resp_rdy),
		.resp_val(ctrl__resp_val)
	);
	wire [1:0] dpath__a_mux_sel;
	wire [0:0] dpath__a_reg_en;
	wire [0:0] dpath__b_mux_sel;
	wire [0:0] dpath__b_reg_en;
	wire [0:0] dpath__clk;
	wire [0:0] dpath__is_a_lt_b;
	wire [0:0] dpath__is_b_zero;
	wire [15:0] dpath__req_msg_a;
	wire [15:0] dpath__req_msg_b;
	wire [0:0] dpath__reset;
	wire [15:0] dpath__resp_msg;
	GcdUnitDpathRTL_noparam dpath(
		.a_mux_sel(dpath__a_mux_sel),
		.a_reg_en(dpath__a_reg_en),
		.b_mux_sel(dpath__b_mux_sel),
		.b_reg_en(dpath__b_reg_en),
		.clk(dpath__clk),
		.is_a_lt_b(dpath__is_a_lt_b),
		.is_b_zero(dpath__is_b_zero),
		.req_msg_a(dpath__req_msg_a),
		.req_msg_b(dpath__req_msg_b),
		.reset(dpath__reset),
		.resp_msg(dpath__resp_msg)
	);
	assign dpath__clk = clk;
	assign dpath__reset = reset;
	assign ctrl__clk = clk;
	assign ctrl__reset = reset;
	assign dpath__req_msg_a = recv__msg[31-:16];
	assign dpath__req_msg_b = recv__msg[15-:16];
	assign send__msg = dpath__resp_msg;
	assign ctrl__req_val = recv__val;
	assign recv__rdy = ctrl__req_rdy;
	assign send__val = ctrl__resp_val;
	assign ctrl__resp_rdy = send__rdy;
	assign dpath__a_mux_sel = ctrl__a_mux_sel;
	assign dpath__a_reg_en = ctrl__a_reg_en;
	assign dpath__b_mux_sel = ctrl__b_mux_sel;
	assign dpath__b_reg_en = ctrl__b_reg_en;
	assign ctrl__is_b_zero = dpath__is_b_zero;
	assign ctrl__is_a_lt_b = dpath__is_a_lt_b;
endmodule
module LoopThroughPRTL__nbits_32 (
	clk,
	reset,
	sel,
	downstream__req__msg,
	downstream__req__rdy,
	downstream__req__val,
	downstream__resp__msg,
	downstream__resp__rdy,
	downstream__resp__val,
	upstream__req__msg,
	upstream__req__rdy,
	upstream__req__val,
	upstream__resp__msg,
	upstream__resp__rdy,
	upstream__resp__val
);
	input wire [0:0] clk;
	input wire [0:0] reset;
	input wire [0:0] sel;
	output wire [31:0] downstream__req__msg;
	input wire [0:0] downstream__req__rdy;
	output reg [0:0] downstream__req__val;
	input wire [31:0] downstream__resp__msg;
	output reg [0:0] downstream__resp__rdy;
	input wire [0:0] downstream__resp__val;
	input wire [31:0] upstream__req__msg;
	output reg [0:0] upstream__req__rdy;
	input wire [0:0] upstream__req__val;
	output reg [31:0] upstream__resp__msg;
	input wire [0:0] upstream__resp__rdy;
	output reg [0:0] upstream__resp__val;
	always @(*) begin : _lambda__s_spi_min_stack_loopthrough_downstream_req_val
		downstream__req__val = (sel ? 1'd0 : upstream__req__val);
	end
	always @(*) begin : _lambda__s_spi_min_stack_loopthrough_downstream_resp_rdy
		downstream__resp__rdy = (sel ? 1'd0 : upstream__resp__rdy);
	end
	always @(*) begin : _lambda__s_spi_min_stack_loopthrough_upstream_req_rdy
		upstream__req__rdy = (sel ? upstream__resp__rdy : downstream__req__rdy);
	end
	always @(*) begin : _lambda__s_spi_min_stack_loopthrough_upstream_resp_msg
		upstream__resp__msg = (sel ? upstream__req__msg : downstream__resp__msg);
	end
	always @(*) begin : _lambda__s_spi_min_stack_loopthrough_upstream_resp_val
		upstream__resp__val = (sel ? upstream__req__val : downstream__resp__val);
	end
	assign downstream__req__msg = upstream__req__msg;
endmodule
module NormalQueueCtrlRTL__num_entries_5 (
	clk,
	count,
	raddr,
	recv_rdy,
	recv_val,
	reset,
	send_rdy,
	send_val,
	waddr,
	wen
);
	input wire [0:0] clk;
	output reg [2:0] count;
	output wire [2:0] raddr;
	output reg [0:0] recv_rdy;
	input wire [0:0] recv_val;
	input wire [0:0] reset;
	input wire [0:0] send_rdy;
	output reg [0:0] send_val;
	output wire [2:0] waddr;
	output wire [0:0] wen;
	localparam [2:0] __const__num_entries_at__lambda__s_spi_min_stack_minion_adapter_cm_q_ctrl_recv_rdy = 3'd5;
	localparam [2:0] __const__num_entries_at_up_reg = 3'd5;
	reg [2:0] head;
	reg [0:0] recv_xfer;
	reg [0:0] send_xfer;
	reg [2:0] tail;
	always @(*) begin : _lambda__s_spi_min_stack_minion_adapter_cm_q_ctrl_recv_rdy
		recv_rdy = count < __const__num_entries_at__lambda__s_spi_min_stack_minion_adapter_cm_q_ctrl_recv_rdy;
	end
	always @(*) begin : _lambda__s_spi_min_stack_minion_adapter_cm_q_ctrl_recv_xfer
		recv_xfer = recv_val & recv_rdy;
	end
	always @(*) begin : _lambda__s_spi_min_stack_minion_adapter_cm_q_ctrl_send_val
		send_val = count > 3'd0;
	end
	always @(*) begin : _lambda__s_spi_min_stack_minion_adapter_cm_q_ctrl_send_xfer
		send_xfer = send_val & send_rdy;
	end
	always @(posedge clk) begin : up_reg
		if (reset) begin
			head <= 3'd0;
			tail <= 3'd0;
			count <= 3'd0;
		end
		else begin
			if (recv_xfer)
				tail <= (tail < (__const__num_entries_at_up_reg - 3'd1) ? tail + 3'd1 : 3'd0);
			if (send_xfer)
				head <= (head < (__const__num_entries_at_up_reg - 3'd1) ? head + 3'd1 : 3'd0);
			if (recv_xfer & ~send_xfer)
				count <= count + 3'd1;
			else if (~recv_xfer & send_xfer)
				count <= count - 3'd1;
		end
	end
	assign wen = recv_xfer;
	assign waddr = tail;
	assign raddr = head;
endmodule
module RegisterFile__35272b4450df532b (
	clk,
	raddr,
	rdata,
	reset,
	waddr,
	wdata,
	wen
);
	input wire [0:0] clk;
	input wire [2:0] raddr;
	output reg [31:0] rdata;
	input wire [0:0] reset;
	input wire [2:0] waddr;
	input wire [31:0] wdata;
	input wire [0:0] wen;
	localparam [0:0] __const__rd_ports_at_up_rf_read = 1'd1;
	localparam [0:0] __const__wr_ports_at_up_rf_write = 1'd1;
	reg [31:0] regs [0:4];
	function automatic [0:0] sv2v_cast_1;
		input reg [0:0] inp;
		sv2v_cast_1 = inp;
	endfunction
	always @(*) begin : up_rf_read
		begin : sv2v_autoblock_1
			reg [31:0] i;
			for (i = 1'd0; i < __const__rd_ports_at_up_rf_read; i = i + 1'd1)
				rdata[sv2v_cast_1(i) * 32+:32] = regs[raddr[sv2v_cast_1(i) * 3+:3]];
		end
	end
	always @(posedge clk) begin : up_rf_write
		begin : sv2v_autoblock_2
			reg [31:0] i;
			for (i = 1'd0; i < __const__wr_ports_at_up_rf_write; i = i + 1'd1)
				if (wen[sv2v_cast_1(i)+:1])
					regs[waddr[sv2v_cast_1(i) * 3+:3]] <= wdata[sv2v_cast_1(i) * 32+:32];
		end
	end
endmodule
module NormalQueueDpathRTL__EntryType_Bits32__num_entries_5 (
	clk,
	raddr,
	recv_msg,
	reset,
	send_msg,
	waddr,
	wen
);
	input wire [0:0] clk;
	input wire [2:0] raddr;
	input wire [31:0] recv_msg;
	input wire [0:0] reset;
	output wire [31:0] send_msg;
	input wire [2:0] waddr;
	input wire [0:0] wen;
	wire [0:0] rf__clk;
	wire [2:0] rf__raddr;
	wire [31:0] rf__rdata;
	wire [0:0] rf__reset;
	wire [2:0] rf__waddr;
	wire [31:0] rf__wdata;
	wire [0:0] rf__wen;
	RegisterFile__35272b4450df532b rf(
		.clk(rf__clk),
		.raddr(rf__raddr),
		.rdata(rf__rdata),
		.reset(rf__reset),
		.waddr(rf__waddr),
		.wdata(rf__wdata),
		.wen(rf__wen)
	);
	assign rf__clk = clk;
	assign rf__reset = reset;
	assign rf__raddr[0+:3] = raddr;
	assign send_msg = rf__rdata[0+:32];
	assign rf__wen[0+:1] = wen;
	assign rf__waddr[0+:3] = waddr;
	assign rf__wdata[0+:32] = recv_msg;
endmodule
module NormalQueueRTL__EntryType_Bits32__num_entries_5 (
	clk,
	count,
	reset,
	recv__msg,
	recv__rdy,
	recv__val,
	send__msg,
	send__rdy,
	send__val
);
	input wire [0:0] clk;
	output wire [2:0] count;
	input wire [0:0] reset;
	input wire [31:0] recv__msg;
	output wire [0:0] recv__rdy;
	input wire [0:0] recv__val;
	output wire [31:0] send__msg;
	input wire [0:0] send__rdy;
	output wire [0:0] send__val;
	wire [0:0] ctrl__clk;
	wire [2:0] ctrl__count;
	wire [2:0] ctrl__raddr;
	wire [0:0] ctrl__recv_rdy;
	wire [0:0] ctrl__recv_val;
	wire [0:0] ctrl__reset;
	wire [0:0] ctrl__send_rdy;
	wire [0:0] ctrl__send_val;
	wire [2:0] ctrl__waddr;
	wire [0:0] ctrl__wen;
	NormalQueueCtrlRTL__num_entries_5 ctrl(
		.clk(ctrl__clk),
		.count(ctrl__count),
		.raddr(ctrl__raddr),
		.recv_rdy(ctrl__recv_rdy),
		.recv_val(ctrl__recv_val),
		.reset(ctrl__reset),
		.send_rdy(ctrl__send_rdy),
		.send_val(ctrl__send_val),
		.waddr(ctrl__waddr),
		.wen(ctrl__wen)
	);
	wire [0:0] dpath__clk;
	wire [2:0] dpath__raddr;
	wire [31:0] dpath__recv_msg;
	wire [0:0] dpath__reset;
	wire [31:0] dpath__send_msg;
	wire [2:0] dpath__waddr;
	wire [0:0] dpath__wen;
	NormalQueueDpathRTL__EntryType_Bits32__num_entries_5 dpath(
		.clk(dpath__clk),
		.raddr(dpath__raddr),
		.recv_msg(dpath__recv_msg),
		.reset(dpath__reset),
		.send_msg(dpath__send_msg),
		.waddr(dpath__waddr),
		.wen(dpath__wen)
	);
	assign ctrl__clk = clk;
	assign ctrl__reset = reset;
	assign dpath__clk = clk;
	assign dpath__reset = reset;
	assign dpath__wen = ctrl__wen;
	assign dpath__waddr = ctrl__waddr;
	assign dpath__raddr = ctrl__raddr;
	assign ctrl__recv_val = recv__val;
	assign recv__rdy = ctrl__recv_rdy;
	assign dpath__recv_msg = recv__msg;
	assign send__val = ctrl__send_val;
	assign ctrl__send_rdy = send__rdy;
	assign send__msg = dpath__send_msg;
	assign count = ctrl__count;
endmodule
module SPIMinionAdapterPRTL__nbits_34__num_entries_5 (
	clk,
	parity,
	reset,
	pull__en,
	pull__msg,
	push__en,
	push__msg,
	recv__msg,
	recv__rdy,
	recv__val,
	send__msg,
	send__rdy,
	send__val
);
	input wire [0:0] clk;
	output reg [0:0] parity;
	input wire [0:0] reset;
	input wire [0:0] pull__en;
	output reg [33:0] pull__msg;
	input wire [0:0] push__en;
	input wire [33:0] push__msg;
	input wire [31:0] recv__msg;
	output wire [0:0] recv__rdy;
	input wire [0:0] recv__val;
	output wire [31:0] send__msg;
	input wire [0:0] send__rdy;
	output wire [0:0] send__val;
	localparam [2:0] __const__num_entries_at_comb_block = 3'd5;
	reg [0:0] cm_send_rdy;
	reg [0:0] mc_recv_val;
	reg [0:0] open_entries;
	wire [0:0] cm_q__clk;
	wire [2:0] cm_q__count;
	wire [0:0] cm_q__reset;
	wire [31:0] cm_q__recv__msg;
	wire [0:0] cm_q__recv__rdy;
	wire [0:0] cm_q__recv__val;
	wire [31:0] cm_q__send__msg;
	wire [0:0] cm_q__send__rdy;
	wire [0:0] cm_q__send__val;
	NormalQueueRTL__EntryType_Bits32__num_entries_5 cm_q(
		.clk(cm_q__clk),
		.count(cm_q__count),
		.reset(cm_q__reset),
		.recv__msg(cm_q__recv__msg),
		.recv__rdy(cm_q__recv__rdy),
		.recv__val(cm_q__recv__val),
		.send__msg(cm_q__send__msg),
		.send__rdy(cm_q__send__rdy),
		.send__val(cm_q__send__val)
	);
	wire [0:0] mc_q__clk;
	wire [2:0] mc_q__count;
	wire [0:0] mc_q__reset;
	wire [31:0] mc_q__recv__msg;
	wire [0:0] mc_q__recv__rdy;
	wire [0:0] mc_q__recv__val;
	wire [31:0] mc_q__send__msg;
	wire [0:0] mc_q__send__rdy;
	wire [0:0] mc_q__send__val;
	NormalQueueRTL__EntryType_Bits32__num_entries_5 mc_q(
		.clk(mc_q__clk),
		.count(mc_q__count),
		.reset(mc_q__reset),
		.recv__msg(mc_q__recv__msg),
		.recv__rdy(mc_q__recv__rdy),
		.recv__val(mc_q__recv__val),
		.send__msg(mc_q__send__msg),
		.send__rdy(mc_q__send__rdy),
		.send__val(mc_q__send__val)
	);
	always @(*) begin : _lambda__s_spi_min_stack_minion_adapter_parity
		parity = ^send__msg & send__val;
	end
	always @(*) begin : comb_block
		open_entries = mc_q__count < (__const__num_entries_at_comb_block - 3'd1);
		mc_recv_val = push__msg[33] & push__en;
		pull__msg[32] = mc_q__recv__rdy & (~mc_q__recv__val | open_entries);
		cm_send_rdy = push__msg[32] & pull__en;
		pull__msg[33] = cm_send_rdy & cm_q__send__val;
		pull__msg[31-:32] = cm_q__send__msg & {{31 {pull__msg[33]}}, pull__msg[33]};
	end
	assign mc_q__clk = clk;
	assign mc_q__reset = reset;
	assign send__val = mc_q__send__val;
	assign send__msg = mc_q__send__msg;
	assign mc_q__send__rdy = send__rdy;
	assign mc_q__recv__val = mc_recv_val;
	assign mc_q__recv__msg = push__msg[31-:32];
	assign cm_q__clk = clk;
	assign cm_q__reset = reset;
	assign cm_q__recv__val = recv__val;
	assign recv__rdy = cm_q__recv__rdy;
	assign cm_q__recv__msg = recv__msg;
	assign cm_q__send__rdy = cm_send_rdy;
endmodule
module Synchronizer__reset_value_1 (
	clk,
	in_,
	negedge_,
	out,
	posedge_,
	reset
);
	input wire [0:0] clk;
	input wire [0:0] in_;
	output reg [0:0] negedge_;
	output wire [0:0] out;
	output reg [0:0] posedge_;
	input wire [0:0] reset;
	reg [2:0] shreg;
	always @(*) begin : _lambda__s_spi_min_stack_minion_minion_cs_sync_negedge_
		negedge_ = shreg[2'd2] & ~shreg[2'd1];
	end
	always @(*) begin : _lambda__s_spi_min_stack_minion_minion_cs_sync_posedge_
		posedge_ = ~shreg[2'd2] & shreg[2'd1];
	end
	always @(posedge clk) begin : up_shreg
		if (reset)
			shreg <= 3'h7;
		else
			shreg <= {shreg[2'd1:2'd0], in_};
	end
	assign out = shreg[1:1];
endmodule
module Synchronizer__reset_value_0 (
	clk,
	in_,
	negedge_,
	out,
	posedge_,
	reset
);
	input wire [0:0] clk;
	input wire [0:0] in_;
	output reg [0:0] negedge_;
	output wire [0:0] out;
	output reg [0:0] posedge_;
	input wire [0:0] reset;
	reg [2:0] shreg;
	always @(*) begin : _lambda__s_spi_min_stack_minion_minion_mosi_sync_negedge_
		negedge_ = shreg[2'd2] & ~shreg[2'd1];
	end
	always @(*) begin : _lambda__s_spi_min_stack_minion_minion_mosi_sync_posedge_
		posedge_ = ~shreg[2'd2] & shreg[2'd1];
	end
	always @(posedge clk) begin : up_shreg
		if (reset)
			shreg <= 3'h0;
		else
			shreg <= {shreg[2'd1:2'd0], in_};
	end
	assign out = shreg[1:1];
endmodule
module ShiftReg__nbits_34 (
	clk,
	in_,
	load_data,
	load_en,
	out,
	reset,
	shift_en
);
	input wire [0:0] clk;
	input wire [0:0] in_;
	input wire [33:0] load_data;
	input wire [0:0] load_en;
	output reg [33:0] out;
	input wire [0:0] reset;
	input wire [0:0] shift_en;
	always @(posedge clk) begin : up_shreg
		if (reset)
			out <= {{33 {1'b0}}, 1'd0};
		else if (load_en)
			out <= load_data;
		else if (~load_en & shift_en)
			out <= {out[6'd32:6'd0], in_};
	end
endmodule
module SPIMinionPRTL__nbits_34 (
	clk,
	parity,
	reset,
	pull__en,
	pull__msg,
	push__en,
	push__msg,
	spi_min__cs,
	spi_min__miso,
	spi_min__mosi,
	spi_min__sclk
);
	input wire [0:0] clk;
	output reg [0:0] parity;
	input wire [0:0] reset;
	output wire [0:0] pull__en;
	input wire [33:0] pull__msg;
	output wire [0:0] push__en;
	output wire [33:0] push__msg;
	input wire [0:0] spi_min__cs;
	output wire [0:0] spi_min__miso;
	input wire [0:0] spi_min__mosi;
	input wire [0:0] spi_min__sclk;
	wire [0:0] cs_sync__clk;
	wire [0:0] cs_sync__in_;
	wire [0:0] cs_sync__negedge_;
	wire [0:0] cs_sync__out;
	wire [0:0] cs_sync__posedge_;
	wire [0:0] cs_sync__reset;
	Synchronizer__reset_value_1 cs_sync(
		.clk(cs_sync__clk),
		.in_(cs_sync__in_),
		.negedge_(cs_sync__negedge_),
		.out(cs_sync__out),
		.posedge_(cs_sync__posedge_),
		.reset(cs_sync__reset)
	);
	wire [0:0] mosi_sync__clk;
	wire [0:0] mosi_sync__in_;
	wire [0:0] mosi_sync__negedge_;
	wire [0:0] mosi_sync__out;
	wire [0:0] mosi_sync__posedge_;
	wire [0:0] mosi_sync__reset;
	Synchronizer__reset_value_0 mosi_sync(
		.clk(mosi_sync__clk),
		.in_(mosi_sync__in_),
		.negedge_(mosi_sync__negedge_),
		.out(mosi_sync__out),
		.posedge_(mosi_sync__posedge_),
		.reset(mosi_sync__reset)
	);
	wire [0:0] sclk_sync__clk;
	wire [0:0] sclk_sync__in_;
	wire [0:0] sclk_sync__negedge_;
	wire [0:0] sclk_sync__out;
	wire [0:0] sclk_sync__posedge_;
	wire [0:0] sclk_sync__reset;
	Synchronizer__reset_value_0 sclk_sync(
		.clk(sclk_sync__clk),
		.in_(sclk_sync__in_),
		.negedge_(sclk_sync__negedge_),
		.out(sclk_sync__out),
		.posedge_(sclk_sync__posedge_),
		.reset(sclk_sync__reset)
	);
	wire [0:0] shreg_in__clk;
	wire [0:0] shreg_in__in_;
	wire [33:0] shreg_in__load_data;
	wire [0:0] shreg_in__load_en;
	wire [33:0] shreg_in__out;
	wire [0:0] shreg_in__reset;
	reg [0:0] shreg_in__shift_en;
	ShiftReg__nbits_34 shreg_in(
		.clk(shreg_in__clk),
		.in_(shreg_in__in_),
		.load_data(shreg_in__load_data),
		.load_en(shreg_in__load_en),
		.out(shreg_in__out),
		.reset(shreg_in__reset),
		.shift_en(shreg_in__shift_en)
	);
	wire [0:0] shreg_out__clk;
	wire [0:0] shreg_out__in_;
	wire [33:0] shreg_out__load_data;
	wire [0:0] shreg_out__load_en;
	wire [33:0] shreg_out__out;
	wire [0:0] shreg_out__reset;
	reg [0:0] shreg_out__shift_en;
	ShiftReg__nbits_34 shreg_out(
		.clk(shreg_out__clk),
		.in_(shreg_out__in_),
		.load_data(shreg_out__load_data),
		.load_en(shreg_out__load_en),
		.out(shreg_out__out),
		.reset(shreg_out__reset),
		.shift_en(shreg_out__shift_en)
	);
	always @(*) begin : _lambda__s_spi_min_stack_minion_minion_parity
		parity = ^push__msg[6'd31:6'd0] & push__en;
	end
	always @(*) begin : _lambda__s_spi_min_stack_minion_minion_shreg_in_shift_en
		shreg_in__shift_en = ~cs_sync__out & sclk_sync__posedge_;
	end
	always @(*) begin : _lambda__s_spi_min_stack_minion_minion_shreg_out_shift_en
		shreg_out__shift_en = ~cs_sync__out & sclk_sync__negedge_;
	end
	assign cs_sync__clk = clk;
	assign cs_sync__reset = reset;
	assign cs_sync__in_ = spi_min__cs;
	assign sclk_sync__clk = clk;
	assign sclk_sync__reset = reset;
	assign sclk_sync__in_ = spi_min__sclk;
	assign mosi_sync__clk = clk;
	assign mosi_sync__reset = reset;
	assign mosi_sync__in_ = spi_min__mosi;
	assign shreg_in__clk = clk;
	assign shreg_in__reset = reset;
	assign shreg_in__in_ = mosi_sync__out;
	assign shreg_in__load_en = 1'd0;
	assign shreg_in__load_data = 34'd0;
	assign shreg_out__clk = clk;
	assign shreg_out__reset = reset;
	assign shreg_out__in_ = 1'd0;
	assign shreg_out__load_en = pull__en;
	assign shreg_out__load_data = pull__msg;
	assign spi_min__miso = shreg_out__out[33:33];
	assign pull__en = cs_sync__negedge_;
	assign push__en = cs_sync__posedge_;
	assign push__msg = shreg_in__out;
endmodule
module SPIMinionAdapterCompositePRTL__nbits_34__num_entries_5 (
	adapter_parity,
	clk,
	minion_parity,
	reset,
	recv__msg,
	recv__rdy,
	recv__val,
	send__msg,
	send__rdy,
	send__val,
	spi_min__cs,
	spi_min__miso,
	spi_min__mosi,
	spi_min__sclk
);
	output wire [0:0] adapter_parity;
	input wire [0:0] clk;
	output wire [0:0] minion_parity;
	input wire [0:0] reset;
	input wire [31:0] recv__msg;
	output wire [0:0] recv__rdy;
	input wire [0:0] recv__val;
	output wire [31:0] send__msg;
	input wire [0:0] send__rdy;
	output wire [0:0] send__val;
	input wire [0:0] spi_min__cs;
	output wire [0:0] spi_min__miso;
	input wire [0:0] spi_min__mosi;
	input wire [0:0] spi_min__sclk;
	wire [0:0] adapter__clk;
	wire [0:0] adapter__parity;
	wire [0:0] adapter__reset;
	wire [0:0] adapter__pull__en;
	wire [33:0] adapter__pull__msg;
	wire [0:0] adapter__push__en;
	wire [33:0] adapter__push__msg;
	wire [31:0] adapter__recv__msg;
	wire [0:0] adapter__recv__rdy;
	wire [0:0] adapter__recv__val;
	wire [31:0] adapter__send__msg;
	wire [0:0] adapter__send__rdy;
	wire [0:0] adapter__send__val;
	SPIMinionAdapterPRTL__nbits_34__num_entries_5 adapter(
		.clk(adapter__clk),
		.parity(adapter__parity),
		.reset(adapter__reset),
		.pull__en(adapter__pull__en),
		.pull__msg(adapter__pull__msg),
		.push__en(adapter__push__en),
		.push__msg(adapter__push__msg),
		.recv__msg(adapter__recv__msg),
		.recv__rdy(adapter__recv__rdy),
		.recv__val(adapter__recv__val),
		.send__msg(adapter__send__msg),
		.send__rdy(adapter__send__rdy),
		.send__val(adapter__send__val)
	);
	wire [0:0] minion__clk;
	wire [0:0] minion__parity;
	wire [0:0] minion__reset;
	wire [0:0] minion__pull__en;
	wire [33:0] minion__pull__msg;
	wire [0:0] minion__push__en;
	wire [33:0] minion__push__msg;
	wire [0:0] minion__spi_min__cs;
	wire [0:0] minion__spi_min__miso;
	wire [0:0] minion__spi_min__mosi;
	wire [0:0] minion__spi_min__sclk;
	SPIMinionPRTL__nbits_34 minion(
		.clk(minion__clk),
		.parity(minion__parity),
		.reset(minion__reset),
		.pull__en(minion__pull__en),
		.pull__msg(minion__pull__msg),
		.push__en(minion__push__en),
		.push__msg(minion__push__msg),
		.spi_min__cs(minion__spi_min__cs),
		.spi_min__miso(minion__spi_min__miso),
		.spi_min__mosi(minion__spi_min__mosi),
		.spi_min__sclk(minion__spi_min__sclk)
	);
	assign minion__clk = clk;
	assign minion__reset = reset;
	assign minion__spi_min__cs = spi_min__cs;
	assign spi_min__miso = minion__spi_min__miso;
	assign minion__spi_min__mosi = spi_min__mosi;
	assign minion__spi_min__sclk = spi_min__sclk;
	assign minion_parity = minion__parity;
	assign adapter__clk = clk;
	assign adapter__reset = reset;
	assign adapter__pull__en = minion__pull__en;
	assign minion__pull__msg[33:33] = adapter__pull__msg[33];
	assign minion__pull__msg[32:32] = adapter__pull__msg[32];
	assign minion__pull__msg[31:0] = adapter__pull__msg[31-:32];
	assign adapter__push__en = minion__push__en;
	assign adapter__push__msg[33] = minion__push__msg[33:33];
	assign adapter__push__msg[32] = minion__push__msg[32:32];
	assign adapter__push__msg[31-:32] = minion__push__msg[31:0];
	assign adapter_parity = adapter__parity;
	assign send__msg = adapter__send__msg;
	assign adapter__send__rdy = send__rdy;
	assign send__val = adapter__send__val;
	assign adapter__recv__msg = recv__msg;
	assign recv__rdy = adapter__recv__rdy;
	assign adapter__recv__val = recv__val;
endmodule
module SPIstackPRTL__nbits_34__num_entries_5 (
	adapter_parity,
	clk,
	loopthrough_sel,
	minion_parity,
	reset,
	recv__msg,
	recv__rdy,
	recv__val,
	send__msg,
	send__rdy,
	send__val,
	spi_min__cs,
	spi_min__miso,
	spi_min__mosi,
	spi_min__sclk
);
	output wire [0:0] adapter_parity;
	input wire [0:0] clk;
	input wire [0:0] loopthrough_sel;
	output wire [0:0] minion_parity;
	input wire [0:0] reset;
	input wire [31:0] recv__msg;
	output wire [0:0] recv__rdy;
	input wire [0:0] recv__val;
	output wire [31:0] send__msg;
	input wire [0:0] send__rdy;
	output wire [0:0] send__val;
	input wire [0:0] spi_min__cs;
	output wire [0:0] spi_min__miso;
	input wire [0:0] spi_min__mosi;
	input wire [0:0] spi_min__sclk;
	wire [0:0] loopthrough__clk;
	wire [0:0] loopthrough__reset;
	wire [0:0] loopthrough__sel;
	wire [31:0] loopthrough__downstream__req__msg;
	wire [0:0] loopthrough__downstream__req__rdy;
	wire [0:0] loopthrough__downstream__req__val;
	wire [31:0] loopthrough__downstream__resp__msg;
	wire [0:0] loopthrough__downstream__resp__rdy;
	wire [0:0] loopthrough__downstream__resp__val;
	wire [31:0] loopthrough__upstream__req__msg;
	wire [0:0] loopthrough__upstream__req__rdy;
	wire [0:0] loopthrough__upstream__req__val;
	wire [31:0] loopthrough__upstream__resp__msg;
	wire [0:0] loopthrough__upstream__resp__rdy;
	wire [0:0] loopthrough__upstream__resp__val;
	LoopThroughPRTL__nbits_32 loopthrough(
		.clk(loopthrough__clk),
		.reset(loopthrough__reset),
		.sel(loopthrough__sel),
		.downstream__req__msg(loopthrough__downstream__req__msg),
		.downstream__req__rdy(loopthrough__downstream__req__rdy),
		.downstream__req__val(loopthrough__downstream__req__val),
		.downstream__resp__msg(loopthrough__downstream__resp__msg),
		.downstream__resp__rdy(loopthrough__downstream__resp__rdy),
		.downstream__resp__val(loopthrough__downstream__resp__val),
		.upstream__req__msg(loopthrough__upstream__req__msg),
		.upstream__req__rdy(loopthrough__upstream__req__rdy),
		.upstream__req__val(loopthrough__upstream__req__val),
		.upstream__resp__msg(loopthrough__upstream__resp__msg),
		.upstream__resp__rdy(loopthrough__upstream__resp__rdy),
		.upstream__resp__val(loopthrough__upstream__resp__val)
	);
	wire [0:0] minion__adapter_parity;
	wire [0:0] minion__clk;
	wire [0:0] minion__minion_parity;
	wire [0:0] minion__reset;
	wire [31:0] minion__recv__msg;
	wire [0:0] minion__recv__rdy;
	wire [0:0] minion__recv__val;
	wire [31:0] minion__send__msg;
	wire [0:0] minion__send__rdy;
	wire [0:0] minion__send__val;
	wire [0:0] minion__spi_min__cs;
	wire [0:0] minion__spi_min__miso;
	wire [0:0] minion__spi_min__mosi;
	wire [0:0] minion__spi_min__sclk;
	SPIMinionAdapterCompositePRTL__nbits_34__num_entries_5 minion(
		.adapter_parity(minion__adapter_parity),
		.clk(minion__clk),
		.minion_parity(minion__minion_parity),
		.reset(minion__reset),
		.recv__msg(minion__recv__msg),
		.recv__rdy(minion__recv__rdy),
		.recv__val(minion__recv__val),
		.send__msg(minion__send__msg),
		.send__rdy(minion__send__rdy),
		.send__val(minion__send__val),
		.spi_min__cs(minion__spi_min__cs),
		.spi_min__miso(minion__spi_min__miso),
		.spi_min__mosi(minion__spi_min__mosi),
		.spi_min__sclk(minion__spi_min__sclk)
	);
	assign minion__clk = clk;
	assign minion__reset = reset;
	assign minion__spi_min__cs = spi_min__cs;
	assign spi_min__miso = minion__spi_min__miso;
	assign minion__spi_min__mosi = spi_min__mosi;
	assign minion__spi_min__sclk = spi_min__sclk;
	assign minion_parity = minion__minion_parity;
	assign adapter_parity = minion__adapter_parity;
	assign loopthrough__clk = clk;
	assign loopthrough__reset = reset;
	assign loopthrough__sel = loopthrough_sel;
	assign loopthrough__upstream__req__msg = minion__send__msg;
	assign minion__send__rdy = loopthrough__upstream__req__rdy;
	assign loopthrough__upstream__req__val = minion__send__val;
	assign minion__recv__msg = loopthrough__upstream__resp__msg;
	assign loopthrough__upstream__resp__rdy = minion__recv__rdy;
	assign minion__recv__val = loopthrough__upstream__resp__val;
	assign send__msg = loopthrough__downstream__req__msg;
	assign loopthrough__downstream__req__rdy = send__rdy;
	assign send__val = loopthrough__downstream__req__val;
	assign loopthrough__downstream__resp__msg = recv__msg;
	assign recv__rdy = loopthrough__downstream__resp__rdy;
	assign loopthrough__downstream__resp__val = recv__val;
endmodule
module tapeout_SPI_TapeOutBlockVRTL_sv2v (
    output adapter_parity,
    input  clk,
    input  loopthrough_sel,
    output minion_parity,
    input  reset,
    input  spi_min__cs,
    output spi_min__miso,
    input  spi_min__mosi,
    input  spi_min__sclk,

    output clk_en,
    output reset_en,
    output lt_sel_en,
    output mp_en,
    output ap_en,
    output cs_en,
    output sclk_en,
    output miso_en,
    output mosi_en
);
    assign lt_sel_en = 1; // Input
    assign mp_en     = 0; // Output
    assign ap_en     = 0; // Output
    assign cs_en     = 1; // Input
    assign sclk_en   = 1; // Input
    assign miso_en   = 0; // Output
    assign mosi_en   = 1; // Input
    assign clk_en    = 1; // Input
    assign reset_en  = 1; // Input
	wire [0:0] gcd__clk;
	wire [0:0] gcd__reset;
	reg [31:0] gcd__recv__msg;
	wire [0:0] gcd__recv__rdy;
	reg [0:0] gcd__recv__val;
	wire [15:0] gcd__send__msg;
	reg [0:0] gcd__send__rdy;
	wire [0:0] gcd__send__val;
	GcdUnitRTL_noparam gcd(
		.clk(gcd__clk),
		.reset(gcd__reset),
		.recv__msg(gcd__recv__msg),
		.recv__rdy(gcd__recv__rdy),
		.recv__val(gcd__recv__val),
		.send__msg(gcd__send__msg),
		.send__rdy(gcd__send__rdy),
		.send__val(gcd__send__val)
	);
	wire [0:0] spi_min_stack__adapter_parity;
	wire [0:0] spi_min_stack__clk;
	wire [0:0] spi_min_stack__loopthrough_sel;
	wire [0:0] spi_min_stack__minion_parity;
	wire [0:0] spi_min_stack__reset;
	reg [31:0] spi_min_stack__recv__msg;
	wire [0:0] spi_min_stack__recv__rdy;
	reg [0:0] spi_min_stack__recv__val;
	wire [31:0] spi_min_stack__send__msg;
	reg [0:0] spi_min_stack__send__rdy;
	wire [0:0] spi_min_stack__send__val;
	wire [0:0] spi_min_stack__spi_min__cs;
	wire [0:0] spi_min_stack__spi_min__miso;
	wire [0:0] spi_min_stack__spi_min__mosi;
	wire [0:0] spi_min_stack__spi_min__sclk;
	SPIstackPRTL__nbits_34__num_entries_5 spi_min_stack(
		.adapter_parity(spi_min_stack__adapter_parity),
		.clk(spi_min_stack__clk),
		.loopthrough_sel(spi_min_stack__loopthrough_sel),
		.minion_parity(spi_min_stack__minion_parity),
		.reset(spi_min_stack__reset),
		.recv__msg(spi_min_stack__recv__msg),
		.recv__rdy(spi_min_stack__recv__rdy),
		.recv__val(spi_min_stack__recv__val),
		.send__msg(spi_min_stack__send__msg),
		.send__rdy(spi_min_stack__send__rdy),
		.send__val(spi_min_stack__send__val),
		.spi_min__cs(spi_min_stack__spi_min__cs),
		.spi_min__miso(spi_min_stack__spi_min__miso),
		.spi_min__mosi(spi_min_stack__spi_min__mosi),
		.spi_min__sclk(spi_min_stack__spi_min__sclk)
	);
	always @(*) begin : combinational
		gcd__recv__msg = spi_min_stack__send__msg;
		gcd__recv__val = spi_min_stack__send__val;
		spi_min_stack__send__rdy = gcd__recv__rdy;
		spi_min_stack__recv__msg = {{16 {gcd__send__msg[15]}}, gcd__send__msg};
		spi_min_stack__recv__val = gcd__send__val;
		gcd__send__rdy = spi_min_stack__recv__rdy;
	end
	assign spi_min_stack__clk = clk;
	assign spi_min_stack__reset = reset;
	assign spi_min_stack__spi_min__cs = spi_min__cs;
	assign spi_min_stack__spi_min__sclk = spi_min__sclk;
	assign spi_min_stack__spi_min__mosi = spi_min__mosi;
	assign spi_min__miso = spi_min_stack__spi_min__miso;
	assign spi_min_stack__loopthrough_sel = loopthrough_sel;
	assign minion_parity = spi_min_stack__minion_parity;
	assign adapter_parity = spi_min_stack__adapter_parity;
	assign gcd__clk = clk;
	assign gcd__reset = reset;
endmodule

`endif /* SPI_TAPEOUTBLOCKVRTL_SV2V */
//-----------------------------------------------------------
// Wrapper of placeholder SPI_TapeOutBlockVRTL_sv2v_noparam
//-----------------------------------------------------------

`ifndef SPI_TAPEOUTBLOCKVRTL_SV2V_NOPARAM
`define SPI_TAPEOUTBLOCKVRTL_SV2V_NOPARAM

module grp_99_SPI_TapeOutBlockRTL_32bits_5entries
(
  `ifdef USE_POWER_PINS
    inout vccd1, // User area 1 1.8V supply
    inout vssd1, // User area 1 digital ground
  `endif
  output adapter_parity ,
  output ap_en ,
  input clk ,
  output clk_en ,
  output cs_en ,
  input loopthrough_sel ,
  output lt_sel_en ,
  output minion_parity ,
  output miso_en ,
  output mosi_en ,
  output mp_en ,
  input reset ,
  output reset_en ,
  output sclk_en ,
  input spi_min__cs ,
  output spi_min__miso ,
  input spi_min__mosi ,
  input spi_min__sclk 
);
  tapeout_SPI_TapeOutBlockVRTL_sv2v
  #(
  ) v
  (
    .adapter_parity( adapter_parity ),
    .ap_en( ap_en ),
    .clk( clk ),
    .clk_en( clk_en ),
    .cs_en( cs_en ),
    .loopthrough_sel( loopthrough_sel ),
    .lt_sel_en( lt_sel_en ),
    .minion_parity( minion_parity ),
    .miso_en( miso_en ),
    .mosi_en( mosi_en ),
    .mp_en( mp_en ),
    .reset( reset ),
    .reset_en( reset_en ),
    .sclk_en( sclk_en ),
    .spi_min__cs( spi_min__cs ),
    .spi_min__miso( spi_min__miso ),
    .spi_min__mosi( spi_min__mosi ),
    .spi_min__sclk( spi_min__sclk )
  );
endmodule

`endif /* SPI_TAPEOUTBLOCKVRTL_SV2V_NOPARAM */

